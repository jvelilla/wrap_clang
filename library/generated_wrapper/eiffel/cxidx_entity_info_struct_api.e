note

	description: "This file has been generated by EWG. Do not edit. Changes will be lost!"

	generator: "Eiffel Wrapper Generator"

class CXIDX_ENTITY_INFO_STRUCT_API

inherit

	MEMORY_STRUCTURE

	
create

	make,
	make_by_pointer

feature -- Measurement

	structure_size: INTEGER 
		do
			Result := sizeof_external
		end

feature {ANY} -- Member Access

	kind: INTEGER
			-- Access member `kind`
		require
			exists: exists
		do
			Result := c_kind (item)
		ensure
			result_correct: Result = c_kind (item)
		end

	set_kind (a_value: INTEGER) 
			-- Change the value of member `kind` to `a_value`.
		require
			exists: exists
		do
			set_c_kind (item, a_value)
		ensure
			kind_set: a_value = kind
		end

	templatekind: INTEGER
			-- Access member `templateKind`
		require
			exists: exists
		do
			Result := c_templatekind (item)
		ensure
			result_correct: Result = c_templatekind (item)
		end

	set_templatekind (a_value: INTEGER) 
			-- Change the value of member `templateKind` to `a_value`.
		require
			exists: exists
		do
			set_c_templatekind (item, a_value)
		ensure
			templatekind_set: a_value = templatekind
		end

	lang: INTEGER
			-- Access member `lang`
		require
			exists: exists
		do
			Result := c_lang (item)
		ensure
			result_correct: Result = c_lang (item)
		end

	set_lang (a_value: INTEGER) 
			-- Change the value of member `lang` to `a_value`.
		require
			exists: exists
		do
			set_c_lang (item, a_value)
		ensure
			lang_set: a_value = lang
		end

	name:  detachable C_STRING
			-- Access member `name`
		require
			exists: exists
		do
			if attached c_name (item) as l_ptr then
				create Result.make_by_pointer (l_ptr)
			end
		ensure
			result_void: Result = Void implies c_name (item) = default_pointer
			result_not_void: attached Result as l_result implies l_result.string.same_string ((create {C_STRING}.make_by_pointer (item)).string)
		end

	set_name (a_value: C_STRING) 
			-- Change the value of member `name` to `a_value`.
		require
			exists: exists
		do
			set_c_name (item, a_value.item )
		end

	usr:  detachable C_STRING
			-- Access member `USR`
		require
			exists: exists
		do
			if attached c_usr (item) as l_ptr then
				create Result.make_by_pointer (l_ptr)
			end
		ensure
			result_void: Result = Void implies c_usr (item) = default_pointer
			result_not_void: attached Result as l_result implies l_result.string.same_string ((create {C_STRING}.make_by_pointer (item)).string)
		end

	set_usr (a_value: C_STRING) 
			-- Change the value of member `USR` to `a_value`.
		require
			exists: exists
		do
			set_c_usr (item, a_value.item )
		end

	cursor: CXCURSOR_STRUCT_API
			-- Access member `cursor`
		require
			exists: exists
		do
			create Result.make_by_pointer ( c_cursor(item) )
		ensure
			result_not_void: Result.item = c_cursor (item) 
		end

	set_cursor (a_value: CXCURSOR_STRUCT_API) 
			-- Set member `cursor`
		require
			a_value_not_void: a_value /= Void
			exists: exists
		do
			set_c_cursor (item, a_value.item)
		ensure
			cursor_set: cursor.item = a_value.item
		end

	attributes: POINTER
			-- Access member `attributes`
		require
			exists: exists
		do
			Result := c_attributes (item) 
		ensure
		end

	set_attributes (a_value: POINTER )
			-- Set member `attributes`
		require
			a_value_not_void: a_value /= default_pointer
			exists: exists
		do
			set_c_attributes (item, a_value)
		ensure
			attributes_set: attributes = a_value 		end

	numattributes: INTEGER
			-- Access member `numAttributes`
		require
			exists: exists
		do
			Result := c_numattributes (item)
		ensure
			result_correct: Result = c_numattributes (item)
		end

	set_numattributes (a_value: INTEGER) 
			-- Change the value of member `numAttributes` to `a_value`.
		require
			exists: exists
		do
			set_c_numattributes (item, a_value)
		ensure
			numattributes_set: a_value = numattributes
		end

feature {NONE} -- Implementation wrapper for struct CXIdxEntityInfo

	sizeof_external: INTEGER 
		external
			"C inline use <Index.h>"
		alias
			"sizeof(CXIdxEntityInfo)"
		end

	c_kind (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <Index.h>"
		alias
			"[
				((CXIdxEntityInfo*)$an_item)->kind
			]"
		end

	set_c_kind (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <Index.h>"
		alias
			"[
				((CXIdxEntityInfo*)$an_item)->kind =  (CXIdxEntityKind)$a_value
			]"
		ensure
			kind_set: a_value = c_kind (an_item)
		end

	c_templatekind (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <Index.h>"
		alias
			"[
				((CXIdxEntityInfo*)$an_item)->templateKind
			]"
		end

	set_c_templatekind (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <Index.h>"
		alias
			"[
				((CXIdxEntityInfo*)$an_item)->templateKind =  (CXIdxEntityCXXTemplateKind)$a_value
			]"
		ensure
			templatekind_set: a_value = c_templatekind (an_item)
		end

	c_lang (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <Index.h>"
		alias
			"[
				((CXIdxEntityInfo*)$an_item)->lang
			]"
		end

	set_c_lang (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <Index.h>"
		alias
			"[
				((CXIdxEntityInfo*)$an_item)->lang =  (CXIdxEntityLanguage)$a_value
			]"
		ensure
			lang_set: a_value = c_lang (an_item)
		end

	c_name (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <Index.h>"
		alias
			"[
				((CXIdxEntityInfo*)$an_item)->name
			]"
		end

	set_c_name (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <Index.h>"
		alias
			"[
				((CXIdxEntityInfo*)$an_item)->name =  (char const*)$a_value
			]"
		ensure
			name_set: a_value = c_name (an_item)
		end

	c_usr (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <Index.h>"
		alias
			"[
				((CXIdxEntityInfo*)$an_item)->USR
			]"
		end

	set_c_usr (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <Index.h>"
		alias
			"[
				((CXIdxEntityInfo*)$an_item)->USR =  (char const*)$a_value
			]"
		ensure
			usr_set: a_value = c_usr (an_item)
		end

	c_cursor (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <Index.h>"
		alias
			"[
				&((CXIdxEntityInfo*)$an_item)->cursor
			]"
		end

	set_c_cursor (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <Index.h>"
		alias
			"[
				((CXIdxEntityInfo*)$an_item)->cursor =  *(CXCursor*)$a_value
			]"
		end

	c_attributes (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <Index.h>"
		alias
			"[
				((CXIdxEntityInfo*)$an_item)->attributes
			]"
		end

	set_c_attributes (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <Index.h>"
		alias
			"[
				((CXIdxEntityInfo*)$an_item)->attributes =  (CXIdxAttrInfo const*const *)$a_value
			]"
		ensure
			attributes_set: a_value = c_attributes (an_item)
		end

	c_numattributes (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <Index.h>"
		alias
			"[
				((CXIdxEntityInfo*)$an_item)->numAttributes
			]"
		end

	set_c_numattributes (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <Index.h>"
		alias
			"[
				((CXIdxEntityInfo*)$an_item)->numAttributes =  (unsigned)$a_value
			]"
		ensure
			numattributes_set: a_value = c_numattributes (an_item)
		end

end
