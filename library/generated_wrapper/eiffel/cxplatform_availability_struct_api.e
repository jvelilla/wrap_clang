note

	description: "This file has been generated by EWG. Do not edit. Changes will be lost!"

	generator: "Eiffel Wrapper Generator"

class CXPLATFORM_AVAILABILITY_STRUCT_API

inherit

	MEMORY_STRUCTURE

	
create

	make,
	make_by_pointer

feature -- Measurement

	structure_size: INTEGER 
		do
			Result := sizeof_external
		end

feature {ANY} -- Member Access

	platform: CXSTRING_STRUCT_API
			-- Access member `Platform`
		require
			exists: exists
		do
			create Result.make_by_pointer ( c_platform(item) )
		ensure
			result_not_void: Result.item = c_platform (item) 
		end

	set_platform (a_value: CXSTRING_STRUCT_API) 
			-- Set member `Platform`
		require
			a_value_not_void: a_value /= Void
			exists: exists
		do
			set_c_platform (item, a_value.item)
		ensure
			platform_set: platform.item = a_value.item
		end

	introduced: CXVERSION_STRUCT_API
			-- Access member `Introduced`
		require
			exists: exists
		do
			create Result.make_by_pointer ( c_introduced(item) )
		ensure
			result_not_void: Result.item = c_introduced (item) 
		end

	set_introduced (a_value: CXVERSION_STRUCT_API) 
			-- Set member `Introduced`
		require
			a_value_not_void: a_value /= Void
			exists: exists
		do
			set_c_introduced (item, a_value.item)
		ensure
			introduced_set: introduced.item = a_value.item
		end

	deprecated: CXVERSION_STRUCT_API
			-- Access member `Deprecated`
		require
			exists: exists
		do
			create Result.make_by_pointer ( c_deprecated(item) )
		ensure
			result_not_void: Result.item = c_deprecated (item) 
		end

	set_deprecated (a_value: CXVERSION_STRUCT_API) 
			-- Set member `Deprecated`
		require
			a_value_not_void: a_value /= Void
			exists: exists
		do
			set_c_deprecated (item, a_value.item)
		ensure
			deprecated_set: deprecated.item = a_value.item
		end

	obsoleted: CXVERSION_STRUCT_API
			-- Access member `Obsoleted`
		require
			exists: exists
		do
			create Result.make_by_pointer ( c_obsoleted(item) )
		ensure
			result_not_void: Result.item = c_obsoleted (item) 
		end

	set_obsoleted (a_value: CXVERSION_STRUCT_API) 
			-- Set member `Obsoleted`
		require
			a_value_not_void: a_value /= Void
			exists: exists
		do
			set_c_obsoleted (item, a_value.item)
		ensure
			obsoleted_set: obsoleted.item = a_value.item
		end

	unavailable: INTEGER
			-- Access member `Unavailable`
		require
			exists: exists
		do
			Result := c_unavailable (item)
		ensure
			result_correct: Result = c_unavailable (item)
		end

	set_unavailable (a_value: INTEGER) 
			-- Change the value of member `Unavailable` to `a_value`.
		require
			exists: exists
		do
			set_c_unavailable (item, a_value)
		ensure
			unavailable_set: a_value = unavailable
		end

	message: CXSTRING_STRUCT_API
			-- Access member `Message`
		require
			exists: exists
		do
			create Result.make_by_pointer ( c_message(item) )
		ensure
			result_not_void: Result.item = c_message (item) 
		end

	set_message (a_value: CXSTRING_STRUCT_API) 
			-- Set member `Message`
		require
			a_value_not_void: a_value /= Void
			exists: exists
		do
			set_c_message (item, a_value.item)
		ensure
			message_set: message.item = a_value.item
		end

feature {NONE} -- Implementation wrapper for struct struct CXPlatformAvailability

	sizeof_external: INTEGER 
		external
			"C inline use <Index.h>"
		alias
			"sizeof(struct CXPlatformAvailability)"
		end

	c_platform (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <Index.h>"
		alias
			"[
				&((struct CXPlatformAvailability*)$an_item)->Platform
			]"
		end

	set_c_platform (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <Index.h>"
		alias
			"[
				((struct CXPlatformAvailability*)$an_item)->Platform =  *(CXString*)$a_value
			]"
		end

	c_introduced (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <Index.h>"
		alias
			"[
				&((struct CXPlatformAvailability*)$an_item)->Introduced
			]"
		end

	set_c_introduced (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <Index.h>"
		alias
			"[
				((struct CXPlatformAvailability*)$an_item)->Introduced =  *(CXVersion*)$a_value
			]"
		end

	c_deprecated (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <Index.h>"
		alias
			"[
				&((struct CXPlatformAvailability*)$an_item)->Deprecated
			]"
		end

	set_c_deprecated (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <Index.h>"
		alias
			"[
				((struct CXPlatformAvailability*)$an_item)->Deprecated =  *(CXVersion*)$a_value
			]"
		end

	c_obsoleted (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <Index.h>"
		alias
			"[
				&((struct CXPlatformAvailability*)$an_item)->Obsoleted
			]"
		end

	set_c_obsoleted (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <Index.h>"
		alias
			"[
				((struct CXPlatformAvailability*)$an_item)->Obsoleted =  *(CXVersion*)$a_value
			]"
		end

	c_unavailable (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <Index.h>"
		alias
			"[
				((struct CXPlatformAvailability*)$an_item)->Unavailable
			]"
		end

	set_c_unavailable (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <Index.h>"
		alias
			"[
				((struct CXPlatformAvailability*)$an_item)->Unavailable =  (int)$a_value
			]"
		ensure
			unavailable_set: a_value = c_unavailable (an_item)
		end

	c_message (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <Index.h>"
		alias
			"[
				&((struct CXPlatformAvailability*)$an_item)->Message
			]"
		end

	set_c_message (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <Index.h>"
		alias
			"[
				((struct CXPlatformAvailability*)$an_item)->Message =  *(CXString*)$a_value
			]"
		end

end
