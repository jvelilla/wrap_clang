note

	description: "This file has been generated by EWG. Do not edit. Changes will be lost!"

	generator: "Eiffel Wrapper Generator"

class CXTURESOURCE_USAGE_ENTRY_STRUCT_API

inherit

	MEMORY_STRUCTURE

	
create

	make,
	make_by_pointer

feature -- Measurement

	structure_size: INTEGER 
		do
			Result := sizeof_external
		end

feature {ANY} -- Member Access

	kind: INTEGER
			-- Access member `kind`
		require
			exists: exists
		do
			Result := c_kind (item)
		ensure
			result_correct: Result = c_kind (item)
		end

	set_kind (a_value: INTEGER) 
			-- Change the value of member `kind` to `a_value`.
		require
			exists: exists
		do
			set_c_kind (item, a_value)
		ensure
			kind_set: a_value = kind
		end

	amount: INTEGER
			-- Access member `amount`
		require
			exists: exists
		do
			Result := c_amount (item)
		ensure
			result_correct: Result = c_amount (item)
		end

	set_amount (a_value: INTEGER) 
			-- Change the value of member `amount` to `a_value`.
		require
			exists: exists
		do
			set_c_amount (item, a_value)
		ensure
			amount_set: a_value = amount
		end

feature {NONE} -- Implementation wrapper for struct struct CXTUResourceUsageEntry

	sizeof_external: INTEGER 
		external
			"C inline use <Index.h>"
		alias
			"sizeof(struct CXTUResourceUsageEntry)"
		end

	c_kind (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <Index.h>"
		alias
			"[
				((struct CXTUResourceUsageEntry*)$an_item)->kind
			]"
		end

	set_c_kind (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <Index.h>"
		alias
			"[
				((struct CXTUResourceUsageEntry*)$an_item)->kind =  (enum CXTUResourceUsageKind)$a_value
			]"
		ensure
			kind_set: a_value = c_kind (an_item)
		end

	c_amount (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <Index.h>"
		alias
			"[
				((struct CXTUResourceUsageEntry*)$an_item)->amount
			]"
		end

	set_c_amount (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <Index.h>"
		alias
			"[
				((struct CXTUResourceUsageEntry*)$an_item)->amount =  (unsigned long)$a_value
			]"
		ensure
			amount_set: a_value = c_amount (an_item)
		end

end
