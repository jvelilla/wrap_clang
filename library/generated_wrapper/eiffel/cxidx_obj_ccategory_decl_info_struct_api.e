note

	description: "This file has been generated by EWG. Do not edit. Changes will be lost!"

	generator: "Eiffel Wrapper Generator"

class CXIDX_OBJ_CCATEGORY_DECL_INFO_STRUCT_API

inherit

	MEMORY_STRUCTURE

	
create

	make,
	make_by_pointer

feature -- Measurement

	structure_size: INTEGER 
		do
			Result := sizeof_external
		end

feature {ANY} -- Member Access

	containerinfo: detachable CXIDX_OBJ_CCONTAINER_DECL_INFO_STRUCT_API 
			-- Access member `containerInfo`
		require
			exists: exists
		do
			if attached c_containerinfo (item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer (l_ptr)
			end
		ensure
			result_void: Result = Void implies c_containerinfo (item) = default_pointer 
			result_not_void: attached Result as l_result implies l_result.item = c_containerinfo (item) 
		end

	set_containerinfo (a_value: CXIDX_OBJ_CCONTAINER_DECL_INFO_STRUCT_API) 
			-- Set member `containerInfo`
		require
			a_value_not_void: a_value /= Void
			exists: exists
		do
			set_c_containerinfo (item, a_value.item)
		ensure
			containerinfo_set: attached containerinfo as l_value implies l_value.item = a_value.item
		end

	objcclass: detachable CXIDX_ENTITY_INFO_STRUCT_API 
			-- Access member `objcClass`
		require
			exists: exists
		do
			if attached c_objcclass (item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer (l_ptr)
			end
		ensure
			result_void: Result = Void implies c_objcclass (item) = default_pointer 
			result_not_void: attached Result as l_result implies l_result.item = c_objcclass (item) 
		end

	set_objcclass (a_value: CXIDX_ENTITY_INFO_STRUCT_API) 
			-- Set member `objcClass`
		require
			a_value_not_void: a_value /= Void
			exists: exists
		do
			set_c_objcclass (item, a_value.item)
		ensure
			objcclass_set: attached objcclass as l_value implies l_value.item = a_value.item
		end

	classcursor: CXCURSOR_STRUCT_API
			-- Access member `classCursor`
		require
			exists: exists
		do
			create Result.make_by_pointer ( c_classcursor(item) )
		ensure
			result_not_void: Result.item = c_classcursor (item) 
		end

	set_classcursor (a_value: CXCURSOR_STRUCT_API) 
			-- Set member `classCursor`
		require
			a_value_not_void: a_value /= Void
			exists: exists
		do
			set_c_classcursor (item, a_value.item)
		ensure
			classcursor_set: classcursor.item = a_value.item
		end

	classloc: CXIDX_LOC_STRUCT_API
			-- Access member `classLoc`
		require
			exists: exists
		do
			create Result.make_by_pointer ( c_classloc(item) )
		ensure
			result_not_void: Result.item = c_classloc (item) 
		end

	set_classloc (a_value: CXIDX_LOC_STRUCT_API) 
			-- Set member `classLoc`
		require
			a_value_not_void: a_value /= Void
			exists: exists
		do
			set_c_classloc (item, a_value.item)
		ensure
			classloc_set: classloc.item = a_value.item
		end

	protocols: detachable CXIDX_OBJ_CPROTOCOL_REF_LIST_INFO_STRUCT_API 
			-- Access member `protocols`
		require
			exists: exists
		do
			if attached c_protocols (item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer (l_ptr)
			end
		ensure
			result_void: Result = Void implies c_protocols (item) = default_pointer 
			result_not_void: attached Result as l_result implies l_result.item = c_protocols (item) 
		end

	set_protocols (a_value: CXIDX_OBJ_CPROTOCOL_REF_LIST_INFO_STRUCT_API) 
			-- Set member `protocols`
		require
			a_value_not_void: a_value /= Void
			exists: exists
		do
			set_c_protocols (item, a_value.item)
		ensure
			protocols_set: attached protocols as l_value implies l_value.item = a_value.item
		end

feature {NONE} -- Implementation wrapper for struct CXIdxObjCCategoryDeclInfo

	sizeof_external: INTEGER 
		external
			"C inline use <Index.h>"
		alias
			"sizeof(CXIdxObjCCategoryDeclInfo)"
		end

	c_containerinfo (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <Index.h>"
		alias
			"[
				((CXIdxObjCCategoryDeclInfo*)$an_item)->containerInfo
			]"
		end

	set_c_containerinfo (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <Index.h>"
		alias
			"[
				((CXIdxObjCCategoryDeclInfo*)$an_item)->containerInfo =  (CXIdxObjCContainerDeclInfo const*)$a_value
			]"
		ensure
			containerinfo_set: a_value = c_containerinfo (an_item)
		end

	c_objcclass (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <Index.h>"
		alias
			"[
				((CXIdxObjCCategoryDeclInfo*)$an_item)->objcClass
			]"
		end

	set_c_objcclass (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <Index.h>"
		alias
			"[
				((CXIdxObjCCategoryDeclInfo*)$an_item)->objcClass =  (CXIdxEntityInfo const*)$a_value
			]"
		ensure
			objcclass_set: a_value = c_objcclass (an_item)
		end

	c_classcursor (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <Index.h>"
		alias
			"[
				&((CXIdxObjCCategoryDeclInfo*)$an_item)->classCursor
			]"
		end

	set_c_classcursor (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <Index.h>"
		alias
			"[
				((CXIdxObjCCategoryDeclInfo*)$an_item)->classCursor =  *(CXCursor*)$a_value
			]"
		end

	c_classloc (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <Index.h>"
		alias
			"[
				&((CXIdxObjCCategoryDeclInfo*)$an_item)->classLoc
			]"
		end

	set_c_classloc (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <Index.h>"
		alias
			"[
				((CXIdxObjCCategoryDeclInfo*)$an_item)->classLoc =  *(CXIdxLoc*)$a_value
			]"
		end

	c_protocols (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <Index.h>"
		alias
			"[
				((CXIdxObjCCategoryDeclInfo*)$an_item)->protocols
			]"
		end

	set_c_protocols (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <Index.h>"
		alias
			"[
				((CXIdxObjCCategoryDeclInfo*)$an_item)->protocols =  (CXIdxObjCProtocolRefListInfo const*)$a_value
			]"
		ensure
			protocols_set: a_value = c_protocols (an_item)
		end

end
