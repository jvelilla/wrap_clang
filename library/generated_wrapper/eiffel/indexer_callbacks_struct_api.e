note

	description: "This file has been generated by EWG. Do not edit. Changes will be lost!"

	generator: "Eiffel Wrapper Generator"

class INDEXER_CALLBACKS_STRUCT_API

inherit

	MEMORY_STRUCTURE

	
create

	make,
	make_by_pointer

feature -- Measurement

	structure_size: INTEGER 
		do
			Result := sizeof_external
		end

feature {ANY} -- Member Access

	abortquery: POINTER
			-- Access member `abortQuery`
		require
			exists: exists
		do
			Result := c_abortquery (item)
		ensure
			result_correct: Result = c_abortquery (item)
		end

	set_abortquery (a_value: POINTER) 
			-- Change the value of member `abortQuery` to `a_value`.
		require
			exists: exists
		do
			set_c_abortquery (item, a_value)
		ensure
			abortquery_set: a_value = abortquery
		end

	diagnostic: POINTER
			-- Access member `diagnostic`
		require
			exists: exists
		do
			Result := c_diagnostic (item)
		ensure
			result_correct: Result = c_diagnostic (item)
		end

	set_diagnostic (a_value: POINTER) 
			-- Change the value of member `diagnostic` to `a_value`.
		require
			exists: exists
		do
			set_c_diagnostic (item, a_value)
		ensure
			diagnostic_set: a_value = diagnostic
		end

	enteredmainfile: POINTER
			-- Access member `enteredMainFile`
		require
			exists: exists
		do
			Result := c_enteredmainfile (item)
		ensure
			result_correct: Result = c_enteredmainfile (item)
		end

	set_enteredmainfile (a_value: POINTER) 
			-- Change the value of member `enteredMainFile` to `a_value`.
		require
			exists: exists
		do
			set_c_enteredmainfile (item, a_value)
		ensure
			enteredmainfile_set: a_value = enteredmainfile
		end

	ppincludedfile: POINTER
			-- Access member `ppIncludedFile`
		require
			exists: exists
		do
			Result := c_ppincludedfile (item)
		ensure
			result_correct: Result = c_ppincludedfile (item)
		end

	set_ppincludedfile (a_value: POINTER) 
			-- Change the value of member `ppIncludedFile` to `a_value`.
		require
			exists: exists
		do
			set_c_ppincludedfile (item, a_value)
		ensure
			ppincludedfile_set: a_value = ppincludedfile
		end

	importedastfile: POINTER
			-- Access member `importedASTFile`
		require
			exists: exists
		do
			Result := c_importedastfile (item)
		ensure
			result_correct: Result = c_importedastfile (item)
		end

	set_importedastfile (a_value: POINTER) 
			-- Change the value of member `importedASTFile` to `a_value`.
		require
			exists: exists
		do
			set_c_importedastfile (item, a_value)
		ensure
			importedastfile_set: a_value = importedastfile
		end

	startedtranslationunit: POINTER
			-- Access member `startedTranslationUnit`
		require
			exists: exists
		do
			Result := c_startedtranslationunit (item)
		ensure
			result_correct: Result = c_startedtranslationunit (item)
		end

	set_startedtranslationunit (a_value: POINTER) 
			-- Change the value of member `startedTranslationUnit` to `a_value`.
		require
			exists: exists
		do
			set_c_startedtranslationunit (item, a_value)
		ensure
			startedtranslationunit_set: a_value = startedtranslationunit
		end

	indexdeclaration: POINTER
			-- Access member `indexDeclaration`
		require
			exists: exists
		do
			Result := c_indexdeclaration (item)
		ensure
			result_correct: Result = c_indexdeclaration (item)
		end

	set_indexdeclaration (a_value: POINTER) 
			-- Change the value of member `indexDeclaration` to `a_value`.
		require
			exists: exists
		do
			set_c_indexdeclaration (item, a_value)
		ensure
			indexdeclaration_set: a_value = indexdeclaration
		end

	indexentityreference: POINTER
			-- Access member `indexEntityReference`
		require
			exists: exists
		do
			Result := c_indexentityreference (item)
		ensure
			result_correct: Result = c_indexentityreference (item)
		end

	set_indexentityreference (a_value: POINTER) 
			-- Change the value of member `indexEntityReference` to `a_value`.
		require
			exists: exists
		do
			set_c_indexentityreference (item, a_value)
		ensure
			indexentityreference_set: a_value = indexentityreference
		end

feature {NONE} -- Implementation wrapper for struct IndexerCallbacks

	sizeof_external: INTEGER 
		external
			"C inline use <Index.h>"
		alias
			"sizeof(IndexerCallbacks)"
		end

	c_abortquery (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <Index.h>"
		alias
			"[
				((IndexerCallbacks*)$an_item)->abortQuery
			]"
		end

	set_c_abortquery (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <Index.h>"
		alias
			"[
				((IndexerCallbacks*)$an_item)->abortQuery =  (int (*) (CXClientData client_data, void *reserved))$a_value
			]"
		ensure
			abortquery_set: a_value = c_abortquery (an_item)
		end

	c_diagnostic (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <Index.h>"
		alias
			"[
				((IndexerCallbacks*)$an_item)->diagnostic
			]"
		end

	set_c_diagnostic (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <Index.h>"
		alias
			"[
				((IndexerCallbacks*)$an_item)->diagnostic =  (void (*) (CXClientData client_data, CXDiagnosticSet anonymous_1, void *reserved))$a_value
			]"
		ensure
			diagnostic_set: a_value = c_diagnostic (an_item)
		end

	c_enteredmainfile (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <Index.h>"
		alias
			"[
				((IndexerCallbacks*)$an_item)->enteredMainFile
			]"
		end

	set_c_enteredmainfile (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <Index.h>"
		alias
			"[
				((IndexerCallbacks*)$an_item)->enteredMainFile =  (CXIdxClientFile (*) (CXClientData client_data, CXFile mainfile, void *reserved))$a_value
			]"
		ensure
			enteredmainfile_set: a_value = c_enteredmainfile (an_item)
		end

	c_ppincludedfile (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <Index.h>"
		alias
			"[
				((IndexerCallbacks*)$an_item)->ppIncludedFile
			]"
		end

	set_c_ppincludedfile (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <Index.h>"
		alias
			"[
				((IndexerCallbacks*)$an_item)->ppIncludedFile =  (CXIdxClientFile (*) (CXClientData client_data, CXIdxIncludedFileInfo const *anonymous_1))$a_value
			]"
		ensure
			ppincludedfile_set: a_value = c_ppincludedfile (an_item)
		end

	c_importedastfile (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <Index.h>"
		alias
			"[
				((IndexerCallbacks*)$an_item)->importedASTFile
			]"
		end

	set_c_importedastfile (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <Index.h>"
		alias
			"[
				((IndexerCallbacks*)$an_item)->importedASTFile =  (CXIdxClientASTFile (*) (CXClientData client_data, CXIdxImportedASTFileInfo const *anonymous_1))$a_value
			]"
		ensure
			importedastfile_set: a_value = c_importedastfile (an_item)
		end

	c_startedtranslationunit (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <Index.h>"
		alias
			"[
				((IndexerCallbacks*)$an_item)->startedTranslationUnit
			]"
		end

	set_c_startedtranslationunit (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <Index.h>"
		alias
			"[
				((IndexerCallbacks*)$an_item)->startedTranslationUnit =  (CXIdxClientContainer (*) (CXClientData client_data, void *reserved))$a_value
			]"
		ensure
			startedtranslationunit_set: a_value = c_startedtranslationunit (an_item)
		end

	c_indexdeclaration (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <Index.h>"
		alias
			"[
				((IndexerCallbacks*)$an_item)->indexDeclaration
			]"
		end

	set_c_indexdeclaration (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <Index.h>"
		alias
			"[
				((IndexerCallbacks*)$an_item)->indexDeclaration =  (void (*) (CXClientData client_data, CXIdxDeclInfo const *anonymous_1))$a_value
			]"
		ensure
			indexdeclaration_set: a_value = c_indexdeclaration (an_item)
		end

	c_indexentityreference (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <Index.h>"
		alias
			"[
				((IndexerCallbacks*)$an_item)->indexEntityReference
			]"
		end

	set_c_indexentityreference (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <Index.h>"
		alias
			"[
				((IndexerCallbacks*)$an_item)->indexEntityReference =  (void (*) (CXClientData client_data, CXIdxEntityRefInfo const *anonymous_1))$a_value
			]"
		ensure
			indexentityreference_set: a_value = c_indexentityreference (an_item)
		end

end
