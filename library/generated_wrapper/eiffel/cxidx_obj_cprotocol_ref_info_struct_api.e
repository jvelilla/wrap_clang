note

	description: "This file has been generated by EWG. Do not edit. Changes will be lost!"

	generator: "Eiffel Wrapper Generator"

class CXIDX_OBJ_CPROTOCOL_REF_INFO_STRUCT_API

inherit

	MEMORY_STRUCTURE

	
create

	make,
	make_by_pointer

feature -- Measurement

	structure_size: INTEGER 
		do
			Result := sizeof_external
		end

feature {ANY} -- Member Access

	protocol: detachable CXIDX_ENTITY_INFO_STRUCT_API 
			-- Access member `protocol`
		require
			exists: exists
		do
			if attached c_protocol (item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer (l_ptr)
			end
		ensure
			result_void: Result = Void implies c_protocol (item) = default_pointer 
			result_not_void: attached Result as l_result implies l_result.item = c_protocol (item) 
		end

	set_protocol (a_value: CXIDX_ENTITY_INFO_STRUCT_API) 
			-- Set member `protocol`
		require
			a_value_not_void: a_value /= Void
			exists: exists
		do
			set_c_protocol (item, a_value.item)
		ensure
			protocol_set: attached protocol as l_value implies l_value.item = a_value.item
		end

	cursor: CXCURSOR_STRUCT_API
			-- Access member `cursor`
		require
			exists: exists
		do
			create Result.make_by_pointer ( c_cursor(item) )
		ensure
			result_not_void: Result.item = c_cursor (item) 
		end

	set_cursor (a_value: CXCURSOR_STRUCT_API) 
			-- Set member `cursor`
		require
			a_value_not_void: a_value /= Void
			exists: exists
		do
			set_c_cursor (item, a_value.item)
		ensure
			cursor_set: cursor.item = a_value.item
		end

	loc: CXIDX_LOC_STRUCT_API
			-- Access member `loc`
		require
			exists: exists
		do
			create Result.make_by_pointer ( c_loc(item) )
		ensure
			result_not_void: Result.item = c_loc (item) 
		end

	set_loc (a_value: CXIDX_LOC_STRUCT_API) 
			-- Set member `loc`
		require
			a_value_not_void: a_value /= Void
			exists: exists
		do
			set_c_loc (item, a_value.item)
		ensure
			loc_set: loc.item = a_value.item
		end

feature {NONE} -- Implementation wrapper for struct CXIdxObjCProtocolRefInfo

	sizeof_external: INTEGER 
		external
			"C inline use <Index.h>"
		alias
			"sizeof(CXIdxObjCProtocolRefInfo)"
		end

	c_protocol (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <Index.h>"
		alias
			"[
				((CXIdxObjCProtocolRefInfo*)$an_item)->protocol
			]"
		end

	set_c_protocol (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <Index.h>"
		alias
			"[
				((CXIdxObjCProtocolRefInfo*)$an_item)->protocol =  (CXIdxEntityInfo const*)$a_value
			]"
		ensure
			protocol_set: a_value = c_protocol (an_item)
		end

	c_cursor (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <Index.h>"
		alias
			"[
				&((CXIdxObjCProtocolRefInfo*)$an_item)->cursor
			]"
		end

	set_c_cursor (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <Index.h>"
		alias
			"[
				((CXIdxObjCProtocolRefInfo*)$an_item)->cursor =  *(CXCursor*)$a_value
			]"
		end

	c_loc (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <Index.h>"
		alias
			"[
				&((CXIdxObjCProtocolRefInfo*)$an_item)->loc
			]"
		end

	set_c_loc (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <Index.h>"
		alias
			"[
				((CXIdxObjCProtocolRefInfo*)$an_item)->loc =  *(CXIdxLoc*)$a_value
			]"
		end

end
