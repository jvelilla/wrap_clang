note

	description: "This file has been generated by EWG. Do not edit. Changes will be lost!"

	generator: "Eiffel Wrapper Generator"

class CXUNSAVED_FILE_STRUCT_API

inherit

	MEMORY_STRUCTURE

	
create

	make,
	make_by_pointer

feature -- Measurement

	structure_size: INTEGER 
		do
			Result := sizeof_external
		end

feature {ANY} -- Member Access

	filename:  detachable C_STRING
			-- Access member `Filename`
		require
			exists: exists
		do
			if attached c_filename (item) as l_ptr then
				create Result.make_by_pointer (l_ptr)
			end
		ensure
			result_void: Result = Void implies c_filename (item) = default_pointer
			result_not_void: attached Result as l_result implies l_result.string.same_string ((create {C_STRING}.make_by_pointer (item)).string)
		end

	set_filename (a_value: C_STRING) 
			-- Change the value of member `Filename` to `a_value`.
		require
			exists: exists
		do
			set_c_filename (item, a_value.item )
		end

	contents:  detachable C_STRING
			-- Access member `Contents`
		require
			exists: exists
		do
			if attached c_contents (item) as l_ptr then
				create Result.make_by_pointer (l_ptr)
			end
		ensure
			result_void: Result = Void implies c_contents (item) = default_pointer
			result_not_void: attached Result as l_result implies l_result.string.same_string ((create {C_STRING}.make_by_pointer (item)).string)
		end

	set_contents (a_value: C_STRING) 
			-- Change the value of member `Contents` to `a_value`.
		require
			exists: exists
		do
			set_c_contents (item, a_value.item )
		end

	length: INTEGER
			-- Access member `Length`
		require
			exists: exists
		do
			Result := c_length (item)
		ensure
			result_correct: Result = c_length (item)
		end

	set_length (a_value: INTEGER) 
			-- Change the value of member `Length` to `a_value`.
		require
			exists: exists
		do
			set_c_length (item, a_value)
		ensure
			length_set: a_value = length
		end

feature {NONE} -- Implementation wrapper for struct struct CXUnsavedFile

	sizeof_external: INTEGER 
		external
			"C inline use <Index.h>"
		alias
			"sizeof(struct CXUnsavedFile)"
		end

	c_filename (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <Index.h>"
		alias
			"[
				((struct CXUnsavedFile*)$an_item)->Filename
			]"
		end

	set_c_filename (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <Index.h>"
		alias
			"[
				((struct CXUnsavedFile*)$an_item)->Filename =  (char const*)$a_value
			]"
		ensure
			filename_set: a_value = c_filename (an_item)
		end

	c_contents (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <Index.h>"
		alias
			"[
				((struct CXUnsavedFile*)$an_item)->Contents
			]"
		end

	set_c_contents (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <Index.h>"
		alias
			"[
				((struct CXUnsavedFile*)$an_item)->Contents =  (char const*)$a_value
			]"
		ensure
			contents_set: a_value = c_contents (an_item)
		end

	c_length (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <Index.h>"
		alias
			"[
				((struct CXUnsavedFile*)$an_item)->Length
			]"
		end

	set_c_length (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <Index.h>"
		alias
			"[
				((struct CXUnsavedFile*)$an_item)->Length =  (unsigned long)$a_value
			]"
		ensure
			length_set: a_value = c_length (an_item)
		end

end
