note

	description: "This file has been generated by EWG. Do not edit. Changes will be lost!"

	generator: "Eiffel Wrapper Generator"

class CXIDX_DECL_INFO_STRUCT_API

inherit

	MEMORY_STRUCTURE

	
create

	make,
	make_by_pointer

feature -- Measurement

	structure_size: INTEGER 
		do
			Result := sizeof_external
		end

feature {ANY} -- Member Access

	entityinfo: detachable CXIDX_ENTITY_INFO_STRUCT_API 
			-- Access member `entityInfo`
		require
			exists: exists
		do
			if attached c_entityinfo (item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer (l_ptr)
			end
		ensure
			result_void: Result = Void implies c_entityinfo (item) = default_pointer 
			result_not_void: attached Result as l_result implies l_result.item = c_entityinfo (item) 
		end

	set_entityinfo (a_value: CXIDX_ENTITY_INFO_STRUCT_API) 
			-- Set member `entityInfo`
		require
			a_value_not_void: a_value /= Void
			exists: exists
		do
			set_c_entityinfo (item, a_value.item)
		ensure
			entityinfo_set: attached entityinfo as l_value implies l_value.item = a_value.item
		end

	cursor: CXCURSOR_STRUCT_API
			-- Access member `cursor`
		require
			exists: exists
		do
			create Result.make_by_pointer ( c_cursor(item) )
		ensure
			result_not_void: Result.item = c_cursor (item) 
		end

	set_cursor (a_value: CXCURSOR_STRUCT_API) 
			-- Set member `cursor`
		require
			a_value_not_void: a_value /= Void
			exists: exists
		do
			set_c_cursor (item, a_value.item)
		ensure
			cursor_set: cursor.item = a_value.item
		end

	loc: CXIDX_LOC_STRUCT_API
			-- Access member `loc`
		require
			exists: exists
		do
			create Result.make_by_pointer ( c_loc(item) )
		ensure
			result_not_void: Result.item = c_loc (item) 
		end

	set_loc (a_value: CXIDX_LOC_STRUCT_API) 
			-- Set member `loc`
		require
			a_value_not_void: a_value /= Void
			exists: exists
		do
			set_c_loc (item, a_value.item)
		ensure
			loc_set: loc.item = a_value.item
		end

	semanticcontainer: detachable CXIDX_CONTAINER_INFO_STRUCT_API 
			-- Access member `semanticContainer`
		require
			exists: exists
		do
			if attached c_semanticcontainer (item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer (l_ptr)
			end
		ensure
			result_void: Result = Void implies c_semanticcontainer (item) = default_pointer 
			result_not_void: attached Result as l_result implies l_result.item = c_semanticcontainer (item) 
		end

	set_semanticcontainer (a_value: CXIDX_CONTAINER_INFO_STRUCT_API) 
			-- Set member `semanticContainer`
		require
			a_value_not_void: a_value /= Void
			exists: exists
		do
			set_c_semanticcontainer (item, a_value.item)
		ensure
			semanticcontainer_set: attached semanticcontainer as l_value implies l_value.item = a_value.item
		end

	lexicalcontainer: detachable CXIDX_CONTAINER_INFO_STRUCT_API 
			-- Access member `lexicalContainer`
		require
			exists: exists
		do
			if attached c_lexicalcontainer (item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer (l_ptr)
			end
		ensure
			result_void: Result = Void implies c_lexicalcontainer (item) = default_pointer 
			result_not_void: attached Result as l_result implies l_result.item = c_lexicalcontainer (item) 
		end

	set_lexicalcontainer (a_value: CXIDX_CONTAINER_INFO_STRUCT_API) 
			-- Set member `lexicalContainer`
		require
			a_value_not_void: a_value /= Void
			exists: exists
		do
			set_c_lexicalcontainer (item, a_value.item)
		ensure
			lexicalcontainer_set: attached lexicalcontainer as l_value implies l_value.item = a_value.item
		end

	isredeclaration: INTEGER
			-- Access member `isRedeclaration`
		require
			exists: exists
		do
			Result := c_isredeclaration (item)
		ensure
			result_correct: Result = c_isredeclaration (item)
		end

	set_isredeclaration (a_value: INTEGER) 
			-- Change the value of member `isRedeclaration` to `a_value`.
		require
			exists: exists
		do
			set_c_isredeclaration (item, a_value)
		ensure
			isredeclaration_set: a_value = isredeclaration
		end

	isdefinition: INTEGER
			-- Access member `isDefinition`
		require
			exists: exists
		do
			Result := c_isdefinition (item)
		ensure
			result_correct: Result = c_isdefinition (item)
		end

	set_isdefinition (a_value: INTEGER) 
			-- Change the value of member `isDefinition` to `a_value`.
		require
			exists: exists
		do
			set_c_isdefinition (item, a_value)
		ensure
			isdefinition_set: a_value = isdefinition
		end

	iscontainer: INTEGER
			-- Access member `isContainer`
		require
			exists: exists
		do
			Result := c_iscontainer (item)
		ensure
			result_correct: Result = c_iscontainer (item)
		end

	set_iscontainer (a_value: INTEGER) 
			-- Change the value of member `isContainer` to `a_value`.
		require
			exists: exists
		do
			set_c_iscontainer (item, a_value)
		ensure
			iscontainer_set: a_value = iscontainer
		end

	declascontainer: detachable CXIDX_CONTAINER_INFO_STRUCT_API 
			-- Access member `declAsContainer`
		require
			exists: exists
		do
			if attached c_declascontainer (item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer (l_ptr)
			end
		ensure
			result_void: Result = Void implies c_declascontainer (item) = default_pointer 
			result_not_void: attached Result as l_result implies l_result.item = c_declascontainer (item) 
		end

	set_declascontainer (a_value: CXIDX_CONTAINER_INFO_STRUCT_API) 
			-- Set member `declAsContainer`
		require
			a_value_not_void: a_value /= Void
			exists: exists
		do
			set_c_declascontainer (item, a_value.item)
		ensure
			declascontainer_set: attached declascontainer as l_value implies l_value.item = a_value.item
		end

	isimplicit: INTEGER
			-- Access member `isImplicit`
		require
			exists: exists
		do
			Result := c_isimplicit (item)
		ensure
			result_correct: Result = c_isimplicit (item)
		end

	set_isimplicit (a_value: INTEGER) 
			-- Change the value of member `isImplicit` to `a_value`.
		require
			exists: exists
		do
			set_c_isimplicit (item, a_value)
		ensure
			isimplicit_set: a_value = isimplicit
		end

	attributes: POINTER
			-- Access member `attributes`
		require
			exists: exists
		do
			Result := c_attributes (item) 
		ensure
		end

	set_attributes (a_value: POINTER )
			-- Set member `attributes`
		require
			a_value_not_void: a_value /= default_pointer
			exists: exists
		do
			set_c_attributes (item, a_value)
		ensure
			attributes_set: attributes = a_value 		end

	numattributes: INTEGER
			-- Access member `numAttributes`
		require
			exists: exists
		do
			Result := c_numattributes (item)
		ensure
			result_correct: Result = c_numattributes (item)
		end

	set_numattributes (a_value: INTEGER) 
			-- Change the value of member `numAttributes` to `a_value`.
		require
			exists: exists
		do
			set_c_numattributes (item, a_value)
		ensure
			numattributes_set: a_value = numattributes
		end

	flags: INTEGER
			-- Access member `flags`
		require
			exists: exists
		do
			Result := c_flags (item)
		ensure
			result_correct: Result = c_flags (item)
		end

	set_flags (a_value: INTEGER) 
			-- Change the value of member `flags` to `a_value`.
		require
			exists: exists
		do
			set_c_flags (item, a_value)
		ensure
			flags_set: a_value = flags
		end

feature {NONE} -- Implementation wrapper for struct CXIdxDeclInfo

	sizeof_external: INTEGER 
		external
			"C inline use <Index.h>"
		alias
			"sizeof(CXIdxDeclInfo)"
		end

	c_entityinfo (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <Index.h>"
		alias
			"[
				((CXIdxDeclInfo*)$an_item)->entityInfo
			]"
		end

	set_c_entityinfo (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <Index.h>"
		alias
			"[
				((CXIdxDeclInfo*)$an_item)->entityInfo =  (CXIdxEntityInfo const*)$a_value
			]"
		ensure
			entityinfo_set: a_value = c_entityinfo (an_item)
		end

	c_cursor (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <Index.h>"
		alias
			"[
				&((CXIdxDeclInfo*)$an_item)->cursor
			]"
		end

	set_c_cursor (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <Index.h>"
		alias
			"[
				((CXIdxDeclInfo*)$an_item)->cursor =  *(CXCursor*)$a_value
			]"
		end

	c_loc (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <Index.h>"
		alias
			"[
				&((CXIdxDeclInfo*)$an_item)->loc
			]"
		end

	set_c_loc (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <Index.h>"
		alias
			"[
				((CXIdxDeclInfo*)$an_item)->loc =  *(CXIdxLoc*)$a_value
			]"
		end

	c_semanticcontainer (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <Index.h>"
		alias
			"[
				((CXIdxDeclInfo*)$an_item)->semanticContainer
			]"
		end

	set_c_semanticcontainer (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <Index.h>"
		alias
			"[
				((CXIdxDeclInfo*)$an_item)->semanticContainer =  (CXIdxContainerInfo const*)$a_value
			]"
		ensure
			semanticcontainer_set: a_value = c_semanticcontainer (an_item)
		end

	c_lexicalcontainer (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <Index.h>"
		alias
			"[
				((CXIdxDeclInfo*)$an_item)->lexicalContainer
			]"
		end

	set_c_lexicalcontainer (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <Index.h>"
		alias
			"[
				((CXIdxDeclInfo*)$an_item)->lexicalContainer =  (CXIdxContainerInfo const*)$a_value
			]"
		ensure
			lexicalcontainer_set: a_value = c_lexicalcontainer (an_item)
		end

	c_isredeclaration (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <Index.h>"
		alias
			"[
				((CXIdxDeclInfo*)$an_item)->isRedeclaration
			]"
		end

	set_c_isredeclaration (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <Index.h>"
		alias
			"[
				((CXIdxDeclInfo*)$an_item)->isRedeclaration =  (int)$a_value
			]"
		ensure
			isredeclaration_set: a_value = c_isredeclaration (an_item)
		end

	c_isdefinition (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <Index.h>"
		alias
			"[
				((CXIdxDeclInfo*)$an_item)->isDefinition
			]"
		end

	set_c_isdefinition (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <Index.h>"
		alias
			"[
				((CXIdxDeclInfo*)$an_item)->isDefinition =  (int)$a_value
			]"
		ensure
			isdefinition_set: a_value = c_isdefinition (an_item)
		end

	c_iscontainer (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <Index.h>"
		alias
			"[
				((CXIdxDeclInfo*)$an_item)->isContainer
			]"
		end

	set_c_iscontainer (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <Index.h>"
		alias
			"[
				((CXIdxDeclInfo*)$an_item)->isContainer =  (int)$a_value
			]"
		ensure
			iscontainer_set: a_value = c_iscontainer (an_item)
		end

	c_declascontainer (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <Index.h>"
		alias
			"[
				((CXIdxDeclInfo*)$an_item)->declAsContainer
			]"
		end

	set_c_declascontainer (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <Index.h>"
		alias
			"[
				((CXIdxDeclInfo*)$an_item)->declAsContainer =  (CXIdxContainerInfo const*)$a_value
			]"
		ensure
			declascontainer_set: a_value = c_declascontainer (an_item)
		end

	c_isimplicit (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <Index.h>"
		alias
			"[
				((CXIdxDeclInfo*)$an_item)->isImplicit
			]"
		end

	set_c_isimplicit (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <Index.h>"
		alias
			"[
				((CXIdxDeclInfo*)$an_item)->isImplicit =  (int)$a_value
			]"
		ensure
			isimplicit_set: a_value = c_isimplicit (an_item)
		end

	c_attributes (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <Index.h>"
		alias
			"[
				((CXIdxDeclInfo*)$an_item)->attributes
			]"
		end

	set_c_attributes (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <Index.h>"
		alias
			"[
				((CXIdxDeclInfo*)$an_item)->attributes =  (CXIdxAttrInfo const*const *)$a_value
			]"
		ensure
			attributes_set: a_value = c_attributes (an_item)
		end

	c_numattributes (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <Index.h>"
		alias
			"[
				((CXIdxDeclInfo*)$an_item)->numAttributes
			]"
		end

	set_c_numattributes (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <Index.h>"
		alias
			"[
				((CXIdxDeclInfo*)$an_item)->numAttributes =  (unsigned)$a_value
			]"
		ensure
			numattributes_set: a_value = c_numattributes (an_item)
		end

	c_flags (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <Index.h>"
		alias
			"[
				((CXIdxDeclInfo*)$an_item)->flags
			]"
		end

	set_c_flags (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <Index.h>"
		alias
			"[
				((CXIdxDeclInfo*)$an_item)->flags =  (unsigned)$a_value
			]"
		ensure
			flags_set: a_value = c_flags (an_item)
		end

end
