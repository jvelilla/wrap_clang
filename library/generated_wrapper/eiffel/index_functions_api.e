note

	description: "This file has been generated by EWG. Do not edit. Changes will be lost!"

	generator: "Eiffel Wrapper Generator"
-- functions wrapper
class INDEX_FUNCTIONS_API


feature -- Access

	clang_create_index (excludedeclarationsfrompch: INTEGER; displaydiagnostics: INTEGER): POINTER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_createIndex ((int)$excludedeclarationsfrompch, (int)$displaydiagnostics);
			]"
		end

	clang_dispose_index (index: POINTER) 
		do
			c_clang_dispose_index (index)
		ensure
			instance_free: class
		end

	clang_cxindex_set_global_options (anonymous_1: POINTER; options: INTEGER) 
		do
			c_clang_cxindex_set_global_options (anonymous_1, options)
		ensure
			instance_free: class
		end

	clang_cxindex_get_global_options (anonymous_1: POINTER): INTEGER 
		do
			Result := c_clang_cxindex_get_global_options (anonymous_1)
		ensure
			instance_free: class
		end

	clang_cxindex_set_invocation_emission_path_option (anonymous_1: POINTER; path: STRING) 
		local
			path_c_string: C_STRING
		do
			create path_c_string.make (path)
			c_clang_cxindex_set_invocation_emission_path_option (anonymous_1, path_c_string.item)
		ensure
			instance_free: class
		end

	clang_get_file_name (sfile: POINTER): detachable CXSTRING_STRUCT_API 
		do
			if attached c_clang_get_file_name (sfile) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	clang_get_file_time (sfile: POINTER): INTEGER 
		do
			Result := c_clang_get_file_time (sfile)
		ensure
			instance_free: class
		end

	clang_get_file_unique_id (file: POINTER; outid: CXFILE_UNIQUE_ID_STRUCT_API): INTEGER 
		do
			Result := c_clang_get_file_unique_id (file, outid.item)
		ensure
			instance_free: class
		end

	clang_is_file_multiple_include_guarded (tu: CXTRANSLATION_UNIT_IMPL_STRUCT_API; file: POINTER): INTEGER 
		do
			Result := c_clang_is_file_multiple_include_guarded (tu.item, file)
		ensure
			instance_free: class
		end

	clang_get_file (tu: CXTRANSLATION_UNIT_IMPL_STRUCT_API; file_name: STRING): POINTER 
		local
			file_name_c_string: C_STRING
		do
			create file_name_c_string.make (file_name)
			Result := c_clang_get_file (tu.item, file_name_c_string.item)
		ensure
			instance_free: class
		end

	clang_get_file_contents (tu: CXTRANSLATION_UNIT_IMPL_STRUCT_API; file: POINTER; size: POINTER): POINTER 
		do
			Result := c_clang_get_file_contents (tu.item, file, size)
		ensure
			instance_free: class
		end

	clang_file_is_equal (file1: POINTER; file2: POINTER): INTEGER 
		do
			Result := c_clang_file_is_equal (file1, file2)
		ensure
			instance_free: class
		end

	clang_file_try_get_real_path_name (file: POINTER): detachable CXSTRING_STRUCT_API 
		do
			if attached c_clang_file_try_get_real_path_name (file) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	clang_get_null_location: detachable CXSOURCE_LOCATION_STRUCT_API 
		do
			if attached c_clang_get_null_location as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	clang_equal_locations (loc1: CXSOURCE_LOCATION_STRUCT_API; loc2: CXSOURCE_LOCATION_STRUCT_API): INTEGER 
		do
			Result := c_clang_equal_locations (loc1.item, loc2.item)
		ensure
			instance_free: class
		end

	clang_get_location (tu: CXTRANSLATION_UNIT_IMPL_STRUCT_API; file: POINTER; line: INTEGER; column: INTEGER): detachable CXSOURCE_LOCATION_STRUCT_API 
		do
			if attached c_clang_get_location (tu.item, file, line, column) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	clang_get_location_for_offset (tu: CXTRANSLATION_UNIT_IMPL_STRUCT_API; file: POINTER; offset: INTEGER): detachable CXSOURCE_LOCATION_STRUCT_API 
		do
			if attached c_clang_get_location_for_offset (tu.item, file, offset) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	clang_location_is_in_system_header (location: CXSOURCE_LOCATION_STRUCT_API): INTEGER 
		do
			Result := c_clang_location_is_in_system_header (location.item)
		ensure
			instance_free: class
		end

	clang_location_is_from_main_file (location: CXSOURCE_LOCATION_STRUCT_API): INTEGER 
		do
			Result := c_clang_location_is_from_main_file (location.item)
		ensure
			instance_free: class
		end

	clang_get_null_range: detachable CXSOURCE_RANGE_STRUCT_API 
		do
			if attached c_clang_get_null_range as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	clang_get_range (begin: CXSOURCE_LOCATION_STRUCT_API; a_end: CXSOURCE_LOCATION_STRUCT_API): detachable CXSOURCE_RANGE_STRUCT_API 
		do
			if attached c_clang_get_range (begin.item, a_end.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	clang_equal_ranges (range1: CXSOURCE_RANGE_STRUCT_API; range2: CXSOURCE_RANGE_STRUCT_API): INTEGER 
		do
			Result := c_clang_equal_ranges (range1.item, range2.item)
		ensure
			instance_free: class
		end

	clang_range_is_null (range: CXSOURCE_RANGE_STRUCT_API): INTEGER 
		do
			Result := c_clang_range_is_null (range.item)
		ensure
			instance_free: class
		end

	clang_get_expansion_location (location: CXSOURCE_LOCATION_STRUCT_API; file: POINTER; line: POINTER; column: POINTER; offset: POINTER) 
		do
			c_clang_get_expansion_location (location.item, file, line, column, offset)
		ensure
			instance_free: class
		end

	clang_get_presumed_location (location: CXSOURCE_LOCATION_STRUCT_API; filename: CXSTRING_STRUCT_API; line: POINTER; column: POINTER) 
		do
			c_clang_get_presumed_location (location.item, filename.item, line, column)
		ensure
			instance_free: class
		end

	clang_get_instantiation_location (location: CXSOURCE_LOCATION_STRUCT_API; file: POINTER; line: POINTER; column: POINTER; offset: POINTER) 
		do
			c_clang_get_instantiation_location (location.item, file, line, column, offset)
		ensure
			instance_free: class
		end

	clang_get_spelling_location (location: CXSOURCE_LOCATION_STRUCT_API; file: POINTER; line: POINTER; column: POINTER; offset: POINTER) 
		do
			c_clang_get_spelling_location (location.item, file, line, column, offset)
		ensure
			instance_free: class
		end

	clang_get_file_location (location: CXSOURCE_LOCATION_STRUCT_API; file: POINTER; line: POINTER; column: POINTER; offset: POINTER) 
		do
			c_clang_get_file_location (location.item, file, line, column, offset)
		ensure
			instance_free: class
		end

	clang_get_range_start (range: CXSOURCE_RANGE_STRUCT_API): detachable CXSOURCE_LOCATION_STRUCT_API 
		do
			if attached c_clang_get_range_start (range.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	clang_get_range_end (range: CXSOURCE_RANGE_STRUCT_API): detachable CXSOURCE_LOCATION_STRUCT_API 
		do
			if attached c_clang_get_range_end (range.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	clang_get_skipped_ranges (tu: CXTRANSLATION_UNIT_IMPL_STRUCT_API; file: POINTER): detachable CXSOURCE_RANGE_LIST_STRUCT_API 
		do
			if attached c_clang_get_skipped_ranges (tu.item, file) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	clang_get_all_skipped_ranges (tu: CXTRANSLATION_UNIT_IMPL_STRUCT_API): detachable CXSOURCE_RANGE_LIST_STRUCT_API 
		do
			if attached c_clang_get_all_skipped_ranges (tu.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	clang_dispose_source_range_list (ranges: CXSOURCE_RANGE_LIST_STRUCT_API) 
		do
			c_clang_dispose_source_range_list (ranges.item)
		ensure
			instance_free: class
		end

	clang_get_num_diagnostics_in_set (diags: POINTER): INTEGER 
		do
			Result := c_clang_get_num_diagnostics_in_set (diags)
		ensure
			instance_free: class
		end

	clang_get_diagnostic_in_set (diags: POINTER; index: INTEGER): POINTER 
		do
			Result := c_clang_get_diagnostic_in_set (diags, index)
		ensure
			instance_free: class
		end

	clang_load_diagnostics (file: STRING; error: POINTER; errorstring: CXSTRING_STRUCT_API): POINTER 
		local
			file_c_string: C_STRING
		do
			create file_c_string.make (file)
			Result := c_clang_load_diagnostics (file_c_string.item, error, errorstring.item)
		ensure
			instance_free: class
		end

	clang_dispose_diagnostic_set (diags: POINTER) 
		do
			c_clang_dispose_diagnostic_set (diags)
		ensure
			instance_free: class
		end

	clang_get_child_diagnostics (d: POINTER): POINTER 
		do
			Result := c_clang_get_child_diagnostics (d)
		ensure
			instance_free: class
		end

	clang_get_num_diagnostics (unit: CXTRANSLATION_UNIT_IMPL_STRUCT_API): INTEGER 
		do
			Result := c_clang_get_num_diagnostics (unit.item)
		ensure
			instance_free: class
		end

	clang_get_diagnostic (unit: CXTRANSLATION_UNIT_IMPL_STRUCT_API; index: INTEGER): POINTER 
		do
			Result := c_clang_get_diagnostic (unit.item, index)
		ensure
			instance_free: class
		end

	clang_get_diagnostic_set_from_tu (unit: CXTRANSLATION_UNIT_IMPL_STRUCT_API): POINTER 
		do
			Result := c_clang_get_diagnostic_set_from_tu (unit.item)
		ensure
			instance_free: class
		end

	clang_dispose_diagnostic (diagnostic: POINTER) 
		do
			c_clang_dispose_diagnostic (diagnostic)
		ensure
			instance_free: class
		end

	clang_format_diagnostic (diagnostic: POINTER; options: INTEGER): detachable CXSTRING_STRUCT_API 
		do
			if attached c_clang_format_diagnostic (diagnostic, options) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	clang_default_diagnostic_display_options: INTEGER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_defaultDiagnosticDisplayOptions ();
			]"
		end

	clang_get_diagnostic_severity (anonymous_1: POINTER): INTEGER 
		do
			Result := c_clang_get_diagnostic_severity (anonymous_1)
		ensure
			instance_free: class
		end

	clang_get_diagnostic_location (anonymous_1: POINTER): detachable CXSOURCE_LOCATION_STRUCT_API 
		do
			if attached c_clang_get_diagnostic_location (anonymous_1) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	clang_get_diagnostic_spelling (anonymous_1: POINTER): detachable CXSTRING_STRUCT_API 
		do
			if attached c_clang_get_diagnostic_spelling (anonymous_1) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	clang_get_diagnostic_option (diag: POINTER; disable: CXSTRING_STRUCT_API): detachable CXSTRING_STRUCT_API 
		do
			if attached c_clang_get_diagnostic_option (diag, disable.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	clang_get_diagnostic_category (anonymous_1: POINTER): INTEGER 
		do
			Result := c_clang_get_diagnostic_category (anonymous_1)
		ensure
			instance_free: class
		end

	clang_get_diagnostic_category_name (category: INTEGER): POINTER
		external
			"C inline use <Index.h>"

		alias
			"[
				CXString *result = (CXString*) malloc (sizeof(CXString));
				*result = clang_getDiagnosticCategoryName ((unsigned)$category);
				return result;
			]"
		end

	clang_get_diagnostic_category_text (anonymous_1: POINTER): detachable CXSTRING_STRUCT_API 
		do
			if attached c_clang_get_diagnostic_category_text (anonymous_1) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	clang_get_diagnostic_num_ranges (anonymous_1: POINTER): INTEGER 
		do
			Result := c_clang_get_diagnostic_num_ranges (anonymous_1)
		ensure
			instance_free: class
		end

	clang_get_diagnostic_range (diagnostic: POINTER; range: INTEGER): detachable CXSOURCE_RANGE_STRUCT_API 
		do
			if attached c_clang_get_diagnostic_range (diagnostic, range) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	clang_get_diagnostic_num_fix_its (diagnostic: POINTER): INTEGER 
		do
			Result := c_clang_get_diagnostic_num_fix_its (diagnostic)
		ensure
			instance_free: class
		end

	clang_get_diagnostic_fix_it (diagnostic: POINTER; fixit: INTEGER; replacementrange: CXSOURCE_RANGE_STRUCT_API): detachable CXSTRING_STRUCT_API 
		do
			if attached c_clang_get_diagnostic_fix_it (diagnostic, fixit, replacementrange.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	clang_get_translation_unit_spelling (ctunit: CXTRANSLATION_UNIT_IMPL_STRUCT_API): detachable CXSTRING_STRUCT_API 
		do
			if attached c_clang_get_translation_unit_spelling (ctunit.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	clang_create_translation_unit_from_source_file (cidx: POINTER; source_filename: STRING; num_clang_command_line_args: INTEGER; clang_command_line_args: POINTER; num_unsaved_files: INTEGER; unsaved_files: CXUNSAVED_FILE_STRUCT_API): detachable CXTRANSLATION_UNIT_IMPL_STRUCT_API 
		local
			source_filename_c_string: C_STRING
		do
			create source_filename_c_string.make (source_filename)
			if attached c_clang_create_translation_unit_from_source_file (cidx, source_filename_c_string.item, num_clang_command_line_args, clang_command_line_args, num_unsaved_files, unsaved_files.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	clang_create_translation_unit (cidx: POINTER; ast_filename: STRING): detachable CXTRANSLATION_UNIT_IMPL_STRUCT_API 
		local
			ast_filename_c_string: C_STRING
		do
			create ast_filename_c_string.make (ast_filename)
			if attached c_clang_create_translation_unit (cidx, ast_filename_c_string.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	clang_create_translation_unit2 (cidx: POINTER; ast_filename: STRING; out_tu: CXTRANSLATION_UNIT_IMPL_STRUCT_API): INTEGER 
		local
			ast_filename_c_string: C_STRING
		do
			create ast_filename_c_string.make (ast_filename)
			Result := c_clang_create_translation_unit2 (cidx, ast_filename_c_string.item, out_tu.item)
		ensure
			instance_free: class
		end

	clang_default_editing_translation_unit_options: INTEGER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_defaultEditingTranslationUnitOptions ();
			]"
		end

	clang_parse_translation_unit (cidx: POINTER; source_filename: STRING; command_line_args: POINTER; num_command_line_args: INTEGER; unsaved_files: CXUNSAVED_FILE_STRUCT_API; num_unsaved_files: INTEGER; options: INTEGER): detachable CXTRANSLATION_UNIT_IMPL_STRUCT_API 
		local
			source_filename_c_string: C_STRING
		do
			create source_filename_c_string.make (source_filename)
			if attached c_clang_parse_translation_unit (cidx, source_filename_c_string.item, command_line_args, num_command_line_args, unsaved_files.item, num_unsaved_files, options) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	clang_parse_translation_unit2 (cidx: POINTER; source_filename: STRING; command_line_args: POINTER; num_command_line_args: INTEGER; unsaved_files: CXUNSAVED_FILE_STRUCT_API; num_unsaved_files: INTEGER; options: INTEGER; out_tu: CXTRANSLATION_UNIT_IMPL_STRUCT_API): INTEGER 
		local
			source_filename_c_string: C_STRING
		do
			create source_filename_c_string.make (source_filename)
			Result := c_clang_parse_translation_unit2 (cidx, source_filename_c_string.item, command_line_args, num_command_line_args, unsaved_files.item, num_unsaved_files, options, out_tu.item)
		ensure
			instance_free: class
		end

	clang_parse_translation_unit2full_argv (cidx: POINTER; source_filename: STRING; command_line_args: POINTER; num_command_line_args: INTEGER; unsaved_files: CXUNSAVED_FILE_STRUCT_API; num_unsaved_files: INTEGER; options: INTEGER; out_tu: CXTRANSLATION_UNIT_IMPL_STRUCT_API): INTEGER 
		local
			source_filename_c_string: C_STRING
		do
			create source_filename_c_string.make (source_filename)
			Result := c_clang_parse_translation_unit2full_argv (cidx, source_filename_c_string.item, command_line_args, num_command_line_args, unsaved_files.item, num_unsaved_files, options, out_tu.item)
		ensure
			instance_free: class
		end

	clang_default_save_options (tu: CXTRANSLATION_UNIT_IMPL_STRUCT_API): INTEGER 
		do
			Result := c_clang_default_save_options (tu.item)
		ensure
			instance_free: class
		end

	clang_save_translation_unit (tu: CXTRANSLATION_UNIT_IMPL_STRUCT_API; filename: STRING; options: INTEGER): INTEGER 
		local
			filename_c_string: C_STRING
		do
			create filename_c_string.make (filename)
			Result := c_clang_save_translation_unit (tu.item, filename_c_string.item, options)
		ensure
			instance_free: class
		end

	clang_suspend_translation_unit (anonymous_1: CXTRANSLATION_UNIT_IMPL_STRUCT_API): INTEGER 
		do
			Result := c_clang_suspend_translation_unit (anonymous_1.item)
		ensure
			instance_free: class
		end

	clang_dispose_translation_unit (anonymous_1: CXTRANSLATION_UNIT_IMPL_STRUCT_API) 
		do
			c_clang_dispose_translation_unit (anonymous_1.item)
		ensure
			instance_free: class
		end

	clang_default_reparse_options (tu: CXTRANSLATION_UNIT_IMPL_STRUCT_API): INTEGER 
		do
			Result := c_clang_default_reparse_options (tu.item)
		ensure
			instance_free: class
		end

	clang_reparse_translation_unit (tu: CXTRANSLATION_UNIT_IMPL_STRUCT_API; num_unsaved_files: INTEGER; unsaved_files: CXUNSAVED_FILE_STRUCT_API; options: INTEGER): INTEGER 
		do
			Result := c_clang_reparse_translation_unit (tu.item, num_unsaved_files, unsaved_files.item, options)
		ensure
			instance_free: class
		end

	clang_get_turesource_usage_name (kind: INTEGER): POINTER 
		do
			Result := c_clang_get_turesource_usage_name (kind)
		ensure
			instance_free: class
		end

	clang_get_cxturesource_usage (tu: CXTRANSLATION_UNIT_IMPL_STRUCT_API): detachable CXTURESOURCE_USAGE_STRUCT_API 
		do
			if attached c_clang_get_cxturesource_usage (tu.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	clang_dispose_cxturesource_usage (usage: CXTURESOURCE_USAGE_STRUCT_API) 
		do
			c_clang_dispose_cxturesource_usage (usage.item)
		ensure
			instance_free: class
		end

	clang_get_translation_unit_target_info (ctunit: CXTRANSLATION_UNIT_IMPL_STRUCT_API): detachable CXTARGET_INFO_IMPL_STRUCT_API 
		do
			if attached c_clang_get_translation_unit_target_info (ctunit.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	clang_target_info_dispose (info: CXTARGET_INFO_IMPL_STRUCT_API) 
		do
			c_clang_target_info_dispose (info.item)
		ensure
			instance_free: class
		end

	clang_target_info_get_triple (info: CXTARGET_INFO_IMPL_STRUCT_API): detachable CXSTRING_STRUCT_API 
		do
			if attached c_clang_target_info_get_triple (info.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	clang_target_info_get_pointer_width (info: CXTARGET_INFO_IMPL_STRUCT_API): INTEGER 
		do
			Result := c_clang_target_info_get_pointer_width (info.item)
		ensure
			instance_free: class
		end

	clang_get_null_cursor: detachable CXCURSOR_STRUCT_API 
		do
			if attached c_clang_get_null_cursor as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	clang_get_translation_unit_cursor (anonymous_1: CXTRANSLATION_UNIT_IMPL_STRUCT_API): detachable CXCURSOR_STRUCT_API 
		do
			if attached c_clang_get_translation_unit_cursor (anonymous_1.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	clang_equal_cursors (anonymous_1: CXCURSOR_STRUCT_API; anonymous_2: CXCURSOR_STRUCT_API): INTEGER 
		do
			Result := c_clang_equal_cursors (anonymous_1.item, anonymous_2.item)
		ensure
			instance_free: class
		end

	clang_cursor_is_null (cursor: CXCURSOR_STRUCT_API): INTEGER 
		do
			Result := c_clang_cursor_is_null (cursor.item)
		ensure
			instance_free: class
		end

	clang_hash_cursor (anonymous_1: CXCURSOR_STRUCT_API): INTEGER 
		do
			Result := c_clang_hash_cursor (anonymous_1.item)
		ensure
			instance_free: class
		end

	clang_get_cursor_kind (anonymous_1: CXCURSOR_STRUCT_API): INTEGER 
		do
			Result := c_clang_get_cursor_kind (anonymous_1.item)
		ensure
			instance_free: class
		end

	clang_is_declaration (anonymous_1: INTEGER): INTEGER 
		do
			Result := c_clang_is_declaration (anonymous_1)
		ensure
			instance_free: class
		end

	clang_is_invalid_declaration (anonymous_1: CXCURSOR_STRUCT_API): INTEGER 
		do
			Result := c_clang_is_invalid_declaration (anonymous_1.item)
		ensure
			instance_free: class
		end

	clang_is_reference (anonymous_1: INTEGER): INTEGER 
		do
			Result := c_clang_is_reference (anonymous_1)
		ensure
			instance_free: class
		end

	clang_is_expression (anonymous_1: INTEGER): INTEGER 
		do
			Result := c_clang_is_expression (anonymous_1)
		ensure
			instance_free: class
		end

	clang_is_statement (anonymous_1: INTEGER): INTEGER 
		do
			Result := c_clang_is_statement (anonymous_1)
		ensure
			instance_free: class
		end

	clang_is_attribute (anonymous_1: INTEGER): INTEGER 
		do
			Result := c_clang_is_attribute (anonymous_1)
		ensure
			instance_free: class
		end

	clang_cursor_has_attrs (c: CXCURSOR_STRUCT_API): INTEGER 
		do
			Result := c_clang_cursor_has_attrs (c.item)
		ensure
			instance_free: class
		end

	clang_is_invalid (anonymous_1: INTEGER): INTEGER 
		do
			Result := c_clang_is_invalid (anonymous_1)
		ensure
			instance_free: class
		end

	clang_is_translation_unit (anonymous_1: INTEGER): INTEGER 
		do
			Result := c_clang_is_translation_unit (anonymous_1)
		ensure
			instance_free: class
		end

	clang_is_preprocessing (anonymous_1: INTEGER): INTEGER 
		do
			Result := c_clang_is_preprocessing (anonymous_1)
		ensure
			instance_free: class
		end

	clang_is_unexposed (anonymous_1: INTEGER): INTEGER 
		do
			Result := c_clang_is_unexposed (anonymous_1)
		ensure
			instance_free: class
		end

	clang_get_cursor_linkage (cursor: CXCURSOR_STRUCT_API): INTEGER 
		do
			Result := c_clang_get_cursor_linkage (cursor.item)
		ensure
			instance_free: class
		end

	clang_get_cursor_visibility (cursor: CXCURSOR_STRUCT_API): INTEGER 
		do
			Result := c_clang_get_cursor_visibility (cursor.item)
		ensure
			instance_free: class
		end

	clang_get_cursor_availability (cursor: CXCURSOR_STRUCT_API): INTEGER 
		do
			Result := c_clang_get_cursor_availability (cursor.item)
		ensure
			instance_free: class
		end

	clang_get_cursor_platform_availability (cursor: CXCURSOR_STRUCT_API; always_deprecated: POINTER; deprecated_message: CXSTRING_STRUCT_API; always_unavailable: POINTER; unavailable_message: CXSTRING_STRUCT_API; availability: CXPLATFORM_AVAILABILITY_STRUCT_API; availability_size: INTEGER): INTEGER 
		do
			Result := c_clang_get_cursor_platform_availability (cursor.item, always_deprecated, deprecated_message.item, always_unavailable, unavailable_message.item, availability.item, availability_size)
		ensure
			instance_free: class
		end

	clang_dispose_cxplatform_availability (availability: CXPLATFORM_AVAILABILITY_STRUCT_API) 
		do
			c_clang_dispose_cxplatform_availability (availability.item)
		ensure
			instance_free: class
		end

	clang_get_cursor_language (cursor: CXCURSOR_STRUCT_API): INTEGER 
		do
			Result := c_clang_get_cursor_language (cursor.item)
		ensure
			instance_free: class
		end

	clang_get_cursor_tlskind (cursor: CXCURSOR_STRUCT_API): INTEGER 
		do
			Result := c_clang_get_cursor_tlskind (cursor.item)
		ensure
			instance_free: class
		end

	clang_cursor_get_translation_unit (anonymous_1: CXCURSOR_STRUCT_API): detachable CXTRANSLATION_UNIT_IMPL_STRUCT_API 
		do
			if attached c_clang_cursor_get_translation_unit (anonymous_1.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	clang_create_cxcursor_set: detachable CXCURSOR_SET_IMPL_STRUCT_API 
		do
			if attached c_clang_create_cxcursor_set as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	clang_dispose_cxcursor_set (cset: CXCURSOR_SET_IMPL_STRUCT_API) 
		do
			c_clang_dispose_cxcursor_set (cset.item)
		ensure
			instance_free: class
		end

	clang_cxcursor_set_contains (cset: CXCURSOR_SET_IMPL_STRUCT_API; cursor: CXCURSOR_STRUCT_API): INTEGER 
		do
			Result := c_clang_cxcursor_set_contains (cset.item, cursor.item)
		ensure
			instance_free: class
		end

	clang_cxcursor_set_insert (cset: CXCURSOR_SET_IMPL_STRUCT_API; cursor: CXCURSOR_STRUCT_API): INTEGER 
		do
			Result := c_clang_cxcursor_set_insert (cset.item, cursor.item)
		ensure
			instance_free: class
		end

	clang_get_cursor_semantic_parent (cursor: CXCURSOR_STRUCT_API): detachable CXCURSOR_STRUCT_API 
		do
			if attached c_clang_get_cursor_semantic_parent (cursor.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	clang_get_cursor_lexical_parent (cursor: CXCURSOR_STRUCT_API): detachable CXCURSOR_STRUCT_API 
		do
			if attached c_clang_get_cursor_lexical_parent (cursor.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	clang_get_overridden_cursors (cursor: CXCURSOR_STRUCT_API; overridden: CXCURSOR_STRUCT_API; num_overridden: POINTER) 
		do
			c_clang_get_overridden_cursors (cursor.item, overridden.item, num_overridden)
		ensure
			instance_free: class
		end

	clang_dispose_overridden_cursors (overridden: CXCURSOR_STRUCT_API) 
		do
			c_clang_dispose_overridden_cursors (overridden.item)
		ensure
			instance_free: class
		end

	clang_get_included_file (cursor: CXCURSOR_STRUCT_API): POINTER 
		do
			Result := c_clang_get_included_file (cursor.item)
		ensure
			instance_free: class
		end

	clang_get_cursor (anonymous_1: CXTRANSLATION_UNIT_IMPL_STRUCT_API; anonymous_2: CXSOURCE_LOCATION_STRUCT_API): detachable CXCURSOR_STRUCT_API 
		do
			if attached c_clang_get_cursor (anonymous_1.item, anonymous_2.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	clang_get_cursor_location (anonymous_1: CXCURSOR_STRUCT_API): detachable CXSOURCE_LOCATION_STRUCT_API 
		do
			if attached c_clang_get_cursor_location (anonymous_1.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	clang_get_cursor_extent (anonymous_1: CXCURSOR_STRUCT_API): detachable CXSOURCE_RANGE_STRUCT_API 
		do
			if attached c_clang_get_cursor_extent (anonymous_1.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	clang_get_cursor_type (c: CXCURSOR_STRUCT_API): detachable CXTYPE_STRUCT_API 
		do
			if attached c_clang_get_cursor_type (c.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	clang_get_type_spelling (ct: CXTYPE_STRUCT_API): detachable CXSTRING_STRUCT_API 
		do
			if attached c_clang_get_type_spelling (ct.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	clang_get_typedef_decl_underlying_type (c: CXCURSOR_STRUCT_API): detachable CXTYPE_STRUCT_API 
		do
			if attached c_clang_get_typedef_decl_underlying_type (c.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	clang_get_enum_decl_integer_type (c: CXCURSOR_STRUCT_API): detachable CXTYPE_STRUCT_API 
		do
			if attached c_clang_get_enum_decl_integer_type (c.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	clang_get_enum_constant_decl_value (c: CXCURSOR_STRUCT_API): INTEGER 
		do
			Result := c_clang_get_enum_constant_decl_value (c.item)
		ensure
			instance_free: class
		end

	clang_get_enum_constant_decl_unsigned_value (c: CXCURSOR_STRUCT_API): INTEGER 
		do
			Result := c_clang_get_enum_constant_decl_unsigned_value (c.item)
		ensure
			instance_free: class
		end

	clang_get_field_decl_bit_width (c: CXCURSOR_STRUCT_API): INTEGER 
		do
			Result := c_clang_get_field_decl_bit_width (c.item)
		ensure
			instance_free: class
		end

	clang_cursor_get_num_arguments (c: CXCURSOR_STRUCT_API): INTEGER 
		do
			Result := c_clang_cursor_get_num_arguments (c.item)
		ensure
			instance_free: class
		end

	clang_cursor_get_argument (c: CXCURSOR_STRUCT_API; i: INTEGER): detachable CXCURSOR_STRUCT_API 
		do
			if attached c_clang_cursor_get_argument (c.item, i) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	clang_cursor_get_num_template_arguments (c: CXCURSOR_STRUCT_API): INTEGER 
		do
			Result := c_clang_cursor_get_num_template_arguments (c.item)
		ensure
			instance_free: class
		end

	clang_cursor_get_template_argument_kind (c: CXCURSOR_STRUCT_API; i: INTEGER): INTEGER 
		do
			Result := c_clang_cursor_get_template_argument_kind (c.item, i)
		ensure
			instance_free: class
		end

	clang_cursor_get_template_argument_type (c: CXCURSOR_STRUCT_API; i: INTEGER): detachable CXTYPE_STRUCT_API 
		do
			if attached c_clang_cursor_get_template_argument_type (c.item, i) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	clang_cursor_get_template_argument_value (c: CXCURSOR_STRUCT_API; i: INTEGER): INTEGER 
		do
			Result := c_clang_cursor_get_template_argument_value (c.item, i)
		ensure
			instance_free: class
		end

	clang_cursor_get_template_argument_unsigned_value (c: CXCURSOR_STRUCT_API; i: INTEGER): INTEGER 
		do
			Result := c_clang_cursor_get_template_argument_unsigned_value (c.item, i)
		ensure
			instance_free: class
		end

	clang_equal_types (a: CXTYPE_STRUCT_API; b: CXTYPE_STRUCT_API): INTEGER 
		do
			Result := c_clang_equal_types (a.item, b.item)
		ensure
			instance_free: class
		end

	clang_get_canonical_type (t: CXTYPE_STRUCT_API): detachable CXTYPE_STRUCT_API 
		do
			if attached c_clang_get_canonical_type (t.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	clang_is_const_qualified_type (t: CXTYPE_STRUCT_API): INTEGER 
		do
			Result := c_clang_is_const_qualified_type (t.item)
		ensure
			instance_free: class
		end

	clang_cursor_is_macro_function_like (c: CXCURSOR_STRUCT_API): INTEGER 
		do
			Result := c_clang_cursor_is_macro_function_like (c.item)
		ensure
			instance_free: class
		end

	clang_cursor_is_macro_builtin (c: CXCURSOR_STRUCT_API): INTEGER 
		do
			Result := c_clang_cursor_is_macro_builtin (c.item)
		ensure
			instance_free: class
		end

	clang_cursor_is_function_inlined (c: CXCURSOR_STRUCT_API): INTEGER 
		do
			Result := c_clang_cursor_is_function_inlined (c.item)
		ensure
			instance_free: class
		end

	clang_is_volatile_qualified_type (t: CXTYPE_STRUCT_API): INTEGER 
		do
			Result := c_clang_is_volatile_qualified_type (t.item)
		ensure
			instance_free: class
		end

	clang_is_restrict_qualified_type (t: CXTYPE_STRUCT_API): INTEGER 
		do
			Result := c_clang_is_restrict_qualified_type (t.item)
		ensure
			instance_free: class
		end

	clang_get_address_space (t: CXTYPE_STRUCT_API): INTEGER 
		do
			Result := c_clang_get_address_space (t.item)
		ensure
			instance_free: class
		end

	clang_get_typedef_name (ct: CXTYPE_STRUCT_API): detachable CXSTRING_STRUCT_API 
		do
			if attached c_clang_get_typedef_name (ct.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	clang_get_pointee_type (t: CXTYPE_STRUCT_API): detachable CXTYPE_STRUCT_API 
		do
			if attached c_clang_get_pointee_type (t.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	clang_get_type_declaration (t: CXTYPE_STRUCT_API): detachable CXCURSOR_STRUCT_API 
		do
			if attached c_clang_get_type_declaration (t.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	clang_get_decl_obj_ctype_encoding (c: CXCURSOR_STRUCT_API): detachable CXSTRING_STRUCT_API 
		do
			if attached c_clang_get_decl_obj_ctype_encoding (c.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	clang_type_get_obj_cencoding (type: CXTYPE_STRUCT_API): detachable CXSTRING_STRUCT_API 
		do
			if attached c_clang_type_get_obj_cencoding (type.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	clang_get_type_kind_spelling (k: INTEGER): detachable CXSTRING_STRUCT_API 
		do
			if attached c_clang_get_type_kind_spelling (k) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	clang_get_function_type_calling_conv (t: CXTYPE_STRUCT_API): INTEGER 
		do
			Result := c_clang_get_function_type_calling_conv (t.item)
		ensure
			instance_free: class
		end

	clang_get_result_type (t: CXTYPE_STRUCT_API): detachable CXTYPE_STRUCT_API 
		do
			if attached c_clang_get_result_type (t.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	clang_get_exception_specification_type (t: CXTYPE_STRUCT_API): INTEGER 
		do
			Result := c_clang_get_exception_specification_type (t.item)
		ensure
			instance_free: class
		end

	clang_get_num_arg_types (t: CXTYPE_STRUCT_API): INTEGER 
		do
			Result := c_clang_get_num_arg_types (t.item)
		ensure
			instance_free: class
		end

	clang_get_arg_type (t: CXTYPE_STRUCT_API; i: INTEGER): detachable CXTYPE_STRUCT_API 
		do
			if attached c_clang_get_arg_type (t.item, i) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	clang_type_get_obj_cobject_base_type (t: CXTYPE_STRUCT_API): detachable CXTYPE_STRUCT_API 
		do
			if attached c_clang_type_get_obj_cobject_base_type (t.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	clang_type_get_num_obj_cprotocol_refs (t: CXTYPE_STRUCT_API): INTEGER 
		do
			Result := c_clang_type_get_num_obj_cprotocol_refs (t.item)
		ensure
			instance_free: class
		end

	clang_type_get_obj_cprotocol_decl (t: CXTYPE_STRUCT_API; i: INTEGER): detachable CXCURSOR_STRUCT_API 
		do
			if attached c_clang_type_get_obj_cprotocol_decl (t.item, i) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	clang_type_get_num_obj_ctype_args (t: CXTYPE_STRUCT_API): INTEGER 
		do
			Result := c_clang_type_get_num_obj_ctype_args (t.item)
		ensure
			instance_free: class
		end

	clang_type_get_obj_ctype_arg (t: CXTYPE_STRUCT_API; i: INTEGER): detachable CXTYPE_STRUCT_API 
		do
			if attached c_clang_type_get_obj_ctype_arg (t.item, i) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	clang_is_function_type_variadic (t: CXTYPE_STRUCT_API): INTEGER 
		do
			Result := c_clang_is_function_type_variadic (t.item)
		ensure
			instance_free: class
		end

	clang_get_cursor_result_type (c: CXCURSOR_STRUCT_API): detachable CXTYPE_STRUCT_API 
		do
			if attached c_clang_get_cursor_result_type (c.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	clang_get_cursor_exception_specification_type (c: CXCURSOR_STRUCT_API): INTEGER 
		do
			Result := c_clang_get_cursor_exception_specification_type (c.item)
		ensure
			instance_free: class
		end

	clang_is_podtype (t: CXTYPE_STRUCT_API): INTEGER 
		do
			Result := c_clang_is_podtype (t.item)
		ensure
			instance_free: class
		end

	clang_get_element_type (t: CXTYPE_STRUCT_API): detachable CXTYPE_STRUCT_API 
		do
			if attached c_clang_get_element_type (t.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	clang_get_num_elements (t: CXTYPE_STRUCT_API): INTEGER 
		do
			Result := c_clang_get_num_elements (t.item)
		ensure
			instance_free: class
		end

	clang_get_array_element_type (t: CXTYPE_STRUCT_API): detachable CXTYPE_STRUCT_API 
		do
			if attached c_clang_get_array_element_type (t.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	clang_get_array_size (t: CXTYPE_STRUCT_API): INTEGER 
		do
			Result := c_clang_get_array_size (t.item)
		ensure
			instance_free: class
		end

	clang_type_get_named_type (t: CXTYPE_STRUCT_API): detachable CXTYPE_STRUCT_API 
		do
			if attached c_clang_type_get_named_type (t.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	clang_type_is_transparent_tag_typedef (t: CXTYPE_STRUCT_API): INTEGER 
		do
			Result := c_clang_type_is_transparent_tag_typedef (t.item)
		ensure
			instance_free: class
		end

	clang_type_get_nullability (t: CXTYPE_STRUCT_API): INTEGER 
		do
			Result := c_clang_type_get_nullability (t.item)
		ensure
			instance_free: class
		end

	clang_type_get_align_of (t: CXTYPE_STRUCT_API): INTEGER 
		do
			Result := c_clang_type_get_align_of (t.item)
		ensure
			instance_free: class
		end

	clang_type_get_class_type (t: CXTYPE_STRUCT_API): detachable CXTYPE_STRUCT_API 
		do
			if attached c_clang_type_get_class_type (t.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	clang_type_get_size_of (t: CXTYPE_STRUCT_API): INTEGER 
		do
			Result := c_clang_type_get_size_of (t.item)
		ensure
			instance_free: class
		end

	clang_type_get_offset_of (t: CXTYPE_STRUCT_API; s: STRING): INTEGER 
		local
			s_c_string: C_STRING
		do
			create s_c_string.make (s)
			Result := c_clang_type_get_offset_of (t.item, s_c_string.item)
		ensure
			instance_free: class
		end

	clang_type_get_modified_type (t: CXTYPE_STRUCT_API): detachable CXTYPE_STRUCT_API 
		do
			if attached c_clang_type_get_modified_type (t.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	clang_cursor_get_offset_of_field (c: CXCURSOR_STRUCT_API): INTEGER 
		do
			Result := c_clang_cursor_get_offset_of_field (c.item)
		ensure
			instance_free: class
		end

	clang_cursor_is_anonymous (c: CXCURSOR_STRUCT_API): INTEGER 
		do
			Result := c_clang_cursor_is_anonymous (c.item)
		ensure
			instance_free: class
		end

	clang_type_get_num_template_arguments (t: CXTYPE_STRUCT_API): INTEGER 
		do
			Result := c_clang_type_get_num_template_arguments (t.item)
		ensure
			instance_free: class
		end

	clang_type_get_template_argument_as_type (t: CXTYPE_STRUCT_API; i: INTEGER): detachable CXTYPE_STRUCT_API 
		do
			if attached c_clang_type_get_template_argument_as_type (t.item, i) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	clang_type_get_cxxref_qualifier (t: CXTYPE_STRUCT_API): INTEGER 
		do
			Result := c_clang_type_get_cxxref_qualifier (t.item)
		ensure
			instance_free: class
		end

	clang_cursor_is_bit_field (c: CXCURSOR_STRUCT_API): INTEGER 
		do
			Result := c_clang_cursor_is_bit_field (c.item)
		ensure
			instance_free: class
		end

	clang_is_virtual_base (anonymous_1: CXCURSOR_STRUCT_API): INTEGER 
		do
			Result := c_clang_is_virtual_base (anonymous_1.item)
		ensure
			instance_free: class
		end

	clang_get_cxxaccess_specifier (anonymous_1: CXCURSOR_STRUCT_API): INTEGER 
		do
			Result := c_clang_get_cxxaccess_specifier (anonymous_1.item)
		ensure
			instance_free: class
		end

	clang_cursor_get_storage_class (anonymous_1: CXCURSOR_STRUCT_API): INTEGER 
		do
			Result := c_clang_cursor_get_storage_class (anonymous_1.item)
		ensure
			instance_free: class
		end

	clang_get_num_overloaded_decls (cursor: CXCURSOR_STRUCT_API): INTEGER 
		do
			Result := c_clang_get_num_overloaded_decls (cursor.item)
		ensure
			instance_free: class
		end

	clang_get_overloaded_decl (cursor: CXCURSOR_STRUCT_API; index: INTEGER): detachable CXCURSOR_STRUCT_API 
		do
			if attached c_clang_get_overloaded_decl (cursor.item, index) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	clang_get_iboutlet_collection_type (anonymous_1: CXCURSOR_STRUCT_API): detachable CXTYPE_STRUCT_API 
		do
			if attached c_clang_get_iboutlet_collection_type (anonymous_1.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	clang_visit_children (parent: CXCURSOR_STRUCT_API; visitor: POINTER; client_data: POINTER): INTEGER 
		do
			Result := c_clang_visit_children (parent.item, visitor, client_data)
		ensure
			instance_free: class
		end

	clang_get_cursor_usr (anonymous_1: CXCURSOR_STRUCT_API): detachable CXSTRING_STRUCT_API 
		do
			if attached c_clang_get_cursor_usr (anonymous_1.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	clang_construct_usr_obj_cclass (class_name: POINTER): POINTER
		external
			"C inline use <Index.h>"

		alias
			"[
				CXString *result = (CXString*) malloc (sizeof(CXString));
				*result = clang_constructUSR_ObjCClass ((char const*)$class_name);
				return result;
			]"
		end

	clang_construct_usr_obj_ccategory (class_name: POINTER; category_name: POINTER): POINTER
		external
			"C inline use <Index.h>"

		alias
			"[
				CXString *result = (CXString*) malloc (sizeof(CXString));
				*result = clang_constructUSR_ObjCCategory ((char const*)$class_name, (char const*)$category_name);
				return result;
			]"
		end

	clang_construct_usr_obj_cprotocol (protocol_name: POINTER): POINTER
		external
			"C inline use <Index.h>"

		alias
			"[
				CXString *result = (CXString*) malloc (sizeof(CXString));
				*result = clang_constructUSR_ObjCProtocol ((char const*)$protocol_name);
				return result;
			]"
		end

	clang_construct_usr_obj_civar (name: STRING; classusr: CXSTRING_STRUCT_API): detachable CXSTRING_STRUCT_API 
		local
			name_c_string: C_STRING
		do
			create name_c_string.make (name)
			if attached c_clang_construct_usr_obj_civar (name_c_string.item, classusr.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	clang_construct_usr_obj_cmethod (name: STRING; isinstancemethod: INTEGER; classusr: CXSTRING_STRUCT_API): detachable CXSTRING_STRUCT_API 
		local
			name_c_string: C_STRING
		do
			create name_c_string.make (name)
			if attached c_clang_construct_usr_obj_cmethod (name_c_string.item, isinstancemethod, classusr.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	clang_construct_usr_obj_cproperty (property: STRING; classusr: CXSTRING_STRUCT_API): detachable CXSTRING_STRUCT_API 
		local
			property_c_string: C_STRING
		do
			create property_c_string.make (property)
			if attached c_clang_construct_usr_obj_cproperty (property_c_string.item, classusr.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	clang_get_cursor_spelling (anonymous_1: CXCURSOR_STRUCT_API): detachable CXSTRING_STRUCT_API 
		do
			if attached c_clang_get_cursor_spelling (anonymous_1.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	clang_cursor_get_spelling_name_range (anonymous_1: CXCURSOR_STRUCT_API; pieceindex: INTEGER; options: INTEGER): detachable CXSOURCE_RANGE_STRUCT_API 
		do
			if attached c_clang_cursor_get_spelling_name_range (anonymous_1.item, pieceindex, options) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	clang_printing_policy_get_property (policy: POINTER; property: INTEGER): INTEGER 
		do
			Result := c_clang_printing_policy_get_property (policy, property)
		ensure
			instance_free: class
		end

	clang_printing_policy_set_property (policy: POINTER; property: INTEGER; value: INTEGER) 
		do
			c_clang_printing_policy_set_property (policy, property, value)
		ensure
			instance_free: class
		end

	clang_get_cursor_printing_policy (anonymous_1: CXCURSOR_STRUCT_API): POINTER 
		do
			Result := c_clang_get_cursor_printing_policy (anonymous_1.item)
		ensure
			instance_free: class
		end

	clang_printing_policy_dispose (policy: POINTER) 
		do
			c_clang_printing_policy_dispose (policy)
		ensure
			instance_free: class
		end

	clang_get_cursor_pretty_printed (cursor: CXCURSOR_STRUCT_API; policy: POINTER): detachable CXSTRING_STRUCT_API 
		do
			if attached c_clang_get_cursor_pretty_printed (cursor.item, policy) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	clang_get_cursor_display_name (anonymous_1: CXCURSOR_STRUCT_API): detachable CXSTRING_STRUCT_API 
		do
			if attached c_clang_get_cursor_display_name (anonymous_1.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	clang_get_cursor_referenced (anonymous_1: CXCURSOR_STRUCT_API): detachable CXCURSOR_STRUCT_API 
		do
			if attached c_clang_get_cursor_referenced (anonymous_1.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	clang_get_cursor_definition (anonymous_1: CXCURSOR_STRUCT_API): detachable CXCURSOR_STRUCT_API 
		do
			if attached c_clang_get_cursor_definition (anonymous_1.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	clang_is_cursor_definition (anonymous_1: CXCURSOR_STRUCT_API): INTEGER 
		do
			Result := c_clang_is_cursor_definition (anonymous_1.item)
		ensure
			instance_free: class
		end

	clang_get_canonical_cursor (anonymous_1: CXCURSOR_STRUCT_API): detachable CXCURSOR_STRUCT_API 
		do
			if attached c_clang_get_canonical_cursor (anonymous_1.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	clang_cursor_get_obj_cselector_index (anonymous_1: CXCURSOR_STRUCT_API): INTEGER 
		do
			Result := c_clang_cursor_get_obj_cselector_index (anonymous_1.item)
		ensure
			instance_free: class
		end

	clang_cursor_is_dynamic_call (c: CXCURSOR_STRUCT_API): INTEGER 
		do
			Result := c_clang_cursor_is_dynamic_call (c.item)
		ensure
			instance_free: class
		end

	clang_cursor_get_receiver_type (c: CXCURSOR_STRUCT_API): detachable CXTYPE_STRUCT_API 
		do
			if attached c_clang_cursor_get_receiver_type (c.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	clang_cursor_get_obj_cproperty_attributes (c: CXCURSOR_STRUCT_API; reserved: INTEGER): INTEGER 
		do
			Result := c_clang_cursor_get_obj_cproperty_attributes (c.item, reserved)
		ensure
			instance_free: class
		end

	clang_cursor_get_obj_cproperty_getter_name (c: CXCURSOR_STRUCT_API): detachable CXSTRING_STRUCT_API 
		do
			if attached c_clang_cursor_get_obj_cproperty_getter_name (c.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	clang_cursor_get_obj_cproperty_setter_name (c: CXCURSOR_STRUCT_API): detachable CXSTRING_STRUCT_API 
		do
			if attached c_clang_cursor_get_obj_cproperty_setter_name (c.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	clang_cursor_get_obj_cdecl_qualifiers (c: CXCURSOR_STRUCT_API): INTEGER 
		do
			Result := c_clang_cursor_get_obj_cdecl_qualifiers (c.item)
		ensure
			instance_free: class
		end

	clang_cursor_is_obj_coptional (c: CXCURSOR_STRUCT_API): INTEGER 
		do
			Result := c_clang_cursor_is_obj_coptional (c.item)
		ensure
			instance_free: class
		end

	clang_cursor_is_variadic (c: CXCURSOR_STRUCT_API): INTEGER 
		do
			Result := c_clang_cursor_is_variadic (c.item)
		ensure
			instance_free: class
		end

	clang_cursor_is_external_symbol (c: CXCURSOR_STRUCT_API; language: CXSTRING_STRUCT_API; definedin: CXSTRING_STRUCT_API; isgenerated: POINTER): INTEGER 
		do
			Result := c_clang_cursor_is_external_symbol (c.item, language.item, definedin.item, isgenerated)
		ensure
			instance_free: class
		end

	clang_cursor_get_comment_range (c: CXCURSOR_STRUCT_API): detachable CXSOURCE_RANGE_STRUCT_API 
		do
			if attached c_clang_cursor_get_comment_range (c.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	clang_cursor_get_raw_comment_text (c: CXCURSOR_STRUCT_API): detachable CXSTRING_STRUCT_API 
		do
			if attached c_clang_cursor_get_raw_comment_text (c.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	clang_cursor_get_brief_comment_text (c: CXCURSOR_STRUCT_API): detachable CXSTRING_STRUCT_API 
		do
			if attached c_clang_cursor_get_brief_comment_text (c.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	clang_cursor_get_mangling (anonymous_1: CXCURSOR_STRUCT_API): detachable CXSTRING_STRUCT_API 
		do
			if attached c_clang_cursor_get_mangling (anonymous_1.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	clang_cursor_get_cxxmanglings (anonymous_1: CXCURSOR_STRUCT_API): detachable CXSTRING_SET_STRUCT_API 
		do
			if attached c_clang_cursor_get_cxxmanglings (anonymous_1.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	clang_cursor_get_obj_cmanglings (anonymous_1: CXCURSOR_STRUCT_API): detachable CXSTRING_SET_STRUCT_API 
		do
			if attached c_clang_cursor_get_obj_cmanglings (anonymous_1.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	clang_cursor_get_module (c: CXCURSOR_STRUCT_API): POINTER 
		do
			Result := c_clang_cursor_get_module (c.item)
		ensure
			instance_free: class
		end

	clang_get_module_for_file (anonymous_1: CXTRANSLATION_UNIT_IMPL_STRUCT_API; anonymous_2: POINTER): POINTER 
		do
			Result := c_clang_get_module_for_file (anonymous_1.item, anonymous_2)
		ensure
			instance_free: class
		end

	clang_module_get_astfile (module: POINTER): POINTER 
		do
			Result := c_clang_module_get_astfile (module)
		ensure
			instance_free: class
		end

	clang_module_get_parent (module: POINTER): POINTER 
		do
			Result := c_clang_module_get_parent (module)
		ensure
			instance_free: class
		end

	clang_module_get_name (module: POINTER): detachable CXSTRING_STRUCT_API 
		do
			if attached c_clang_module_get_name (module) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	clang_module_get_full_name (module: POINTER): detachable CXSTRING_STRUCT_API 
		do
			if attached c_clang_module_get_full_name (module) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	clang_module_is_system (module: POINTER): INTEGER 
		do
			Result := c_clang_module_is_system (module)
		ensure
			instance_free: class
		end

	clang_module_get_num_top_level_headers (anonymous_1: CXTRANSLATION_UNIT_IMPL_STRUCT_API; module: POINTER): INTEGER 
		do
			Result := c_clang_module_get_num_top_level_headers (anonymous_1.item, module)
		ensure
			instance_free: class
		end

	clang_module_get_top_level_header (anonymous_1: CXTRANSLATION_UNIT_IMPL_STRUCT_API; module: POINTER; index: INTEGER): POINTER 
		do
			Result := c_clang_module_get_top_level_header (anonymous_1.item, module, index)
		ensure
			instance_free: class
		end

	clang_cxxconstructor_is_converting_constructor (c: CXCURSOR_STRUCT_API): INTEGER 
		do
			Result := c_clang_cxxconstructor_is_converting_constructor (c.item)
		ensure
			instance_free: class
		end

	clang_cxxconstructor_is_copy_constructor (c: CXCURSOR_STRUCT_API): INTEGER 
		do
			Result := c_clang_cxxconstructor_is_copy_constructor (c.item)
		ensure
			instance_free: class
		end

	clang_cxxconstructor_is_default_constructor (c: CXCURSOR_STRUCT_API): INTEGER 
		do
			Result := c_clang_cxxconstructor_is_default_constructor (c.item)
		ensure
			instance_free: class
		end

	clang_cxxconstructor_is_move_constructor (c: CXCURSOR_STRUCT_API): INTEGER 
		do
			Result := c_clang_cxxconstructor_is_move_constructor (c.item)
		ensure
			instance_free: class
		end

	clang_cxxfield_is_mutable (c: CXCURSOR_STRUCT_API): INTEGER 
		do
			Result := c_clang_cxxfield_is_mutable (c.item)
		ensure
			instance_free: class
		end

	clang_cxxmethod_is_defaulted (c: CXCURSOR_STRUCT_API): INTEGER 
		do
			Result := c_clang_cxxmethod_is_defaulted (c.item)
		ensure
			instance_free: class
		end

	clang_cxxmethod_is_pure_virtual (c: CXCURSOR_STRUCT_API): INTEGER 
		do
			Result := c_clang_cxxmethod_is_pure_virtual (c.item)
		ensure
			instance_free: class
		end

	clang_cxxmethod_is_static (c: CXCURSOR_STRUCT_API): INTEGER 
		do
			Result := c_clang_cxxmethod_is_static (c.item)
		ensure
			instance_free: class
		end

	clang_cxxmethod_is_virtual (c: CXCURSOR_STRUCT_API): INTEGER 
		do
			Result := c_clang_cxxmethod_is_virtual (c.item)
		ensure
			instance_free: class
		end

	clang_cxxrecord_is_abstract (c: CXCURSOR_STRUCT_API): INTEGER 
		do
			Result := c_clang_cxxrecord_is_abstract (c.item)
		ensure
			instance_free: class
		end

	clang_enum_decl_is_scoped (c: CXCURSOR_STRUCT_API): INTEGER 
		do
			Result := c_clang_enum_decl_is_scoped (c.item)
		ensure
			instance_free: class
		end

	clang_cxxmethod_is_const (c: CXCURSOR_STRUCT_API): INTEGER 
		do
			Result := c_clang_cxxmethod_is_const (c.item)
		ensure
			instance_free: class
		end

	clang_get_template_cursor_kind (c: CXCURSOR_STRUCT_API): INTEGER 
		do
			Result := c_clang_get_template_cursor_kind (c.item)
		ensure
			instance_free: class
		end

	clang_get_specialized_cursor_template (c: CXCURSOR_STRUCT_API): detachable CXCURSOR_STRUCT_API 
		do
			if attached c_clang_get_specialized_cursor_template (c.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	clang_get_cursor_reference_name_range (c: CXCURSOR_STRUCT_API; nameflags: INTEGER; pieceindex: INTEGER): detachable CXSOURCE_RANGE_STRUCT_API 
		do
			if attached c_clang_get_cursor_reference_name_range (c.item, nameflags, pieceindex) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	clang_get_token (tu: CXTRANSLATION_UNIT_IMPL_STRUCT_API; location: CXSOURCE_LOCATION_STRUCT_API): detachable CXTOKEN_STRUCT_API 
		do
			if attached c_clang_get_token (tu.item, location.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	clang_get_token_kind (anonymous_1: CXTOKEN_STRUCT_API): INTEGER 
		do
			Result := c_clang_get_token_kind (anonymous_1.item)
		ensure
			instance_free: class
		end

	clang_get_token_spelling (anonymous_1: CXTRANSLATION_UNIT_IMPL_STRUCT_API; anonymous_2: CXTOKEN_STRUCT_API): detachable CXSTRING_STRUCT_API 
		do
			if attached c_clang_get_token_spelling (anonymous_1.item, anonymous_2.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	clang_get_token_location (anonymous_1: CXTRANSLATION_UNIT_IMPL_STRUCT_API; anonymous_2: CXTOKEN_STRUCT_API): detachable CXSOURCE_LOCATION_STRUCT_API 
		do
			if attached c_clang_get_token_location (anonymous_1.item, anonymous_2.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	clang_get_token_extent (anonymous_1: CXTRANSLATION_UNIT_IMPL_STRUCT_API; anonymous_2: CXTOKEN_STRUCT_API): detachable CXSOURCE_RANGE_STRUCT_API 
		do
			if attached c_clang_get_token_extent (anonymous_1.item, anonymous_2.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	clang_tokenize (tu: CXTRANSLATION_UNIT_IMPL_STRUCT_API; range: CXSOURCE_RANGE_STRUCT_API; tokens: CXTOKEN_STRUCT_API; numtokens: POINTER) 
		do
			c_clang_tokenize (tu.item, range.item, tokens.item, numtokens)
		ensure
			instance_free: class
		end

	clang_annotate_tokens (tu: CXTRANSLATION_UNIT_IMPL_STRUCT_API; tokens: CXTOKEN_STRUCT_API; numtokens: INTEGER; cursors: CXCURSOR_STRUCT_API) 
		do
			c_clang_annotate_tokens (tu.item, tokens.item, numtokens, cursors.item)
		ensure
			instance_free: class
		end

	clang_dispose_tokens (tu: CXTRANSLATION_UNIT_IMPL_STRUCT_API; tokens: CXTOKEN_STRUCT_API; numtokens: INTEGER) 
		do
			c_clang_dispose_tokens (tu.item, tokens.item, numtokens)
		ensure
			instance_free: class
		end

	clang_get_cursor_kind_spelling (kind: INTEGER): detachable CXSTRING_STRUCT_API 
		do
			if attached c_clang_get_cursor_kind_spelling (kind) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	clang_get_definition_spelling_and_extent (anonymous_1: CXCURSOR_STRUCT_API; startbuf: POINTER; endbuf: POINTER; startline: POINTER; startcolumn: POINTER; endline: POINTER; endcolumn: POINTER) 
		do
			c_clang_get_definition_spelling_and_extent (anonymous_1.item, startbuf, endbuf, startline, startcolumn, endline, endcolumn)
		ensure
			instance_free: class
		end

	clang_enable_stack_traces
		external
			"C inline use <Index.h>"
		alias
			"[
				clang_enableStackTraces ();
			]"
		end

	clang_execute_on_thread (fn: POINTER; user_data: POINTER; stack_size: INTEGER) 
		do
			c_clang_execute_on_thread (fn, user_data, stack_size)
		ensure
			instance_free: class
		end

	clang_get_completion_chunk_kind (completion_string: POINTER; chunk_number: INTEGER): INTEGER 
		do
			Result := c_clang_get_completion_chunk_kind (completion_string, chunk_number)
		ensure
			instance_free: class
		end

	clang_get_completion_chunk_text (completion_string: POINTER; chunk_number: INTEGER): detachable CXSTRING_STRUCT_API 
		do
			if attached c_clang_get_completion_chunk_text (completion_string, chunk_number) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	clang_get_completion_chunk_completion_string (completion_string: POINTER; chunk_number: INTEGER): POINTER 
		do
			Result := c_clang_get_completion_chunk_completion_string (completion_string, chunk_number)
		ensure
			instance_free: class
		end

	clang_get_num_completion_chunks (completion_string: POINTER): INTEGER 
		do
			Result := c_clang_get_num_completion_chunks (completion_string)
		ensure
			instance_free: class
		end

	clang_get_completion_priority (completion_string: POINTER): INTEGER 
		do
			Result := c_clang_get_completion_priority (completion_string)
		ensure
			instance_free: class
		end

	clang_get_completion_availability (completion_string: POINTER): INTEGER 
		do
			Result := c_clang_get_completion_availability (completion_string)
		ensure
			instance_free: class
		end

	clang_get_completion_num_annotations (completion_string: POINTER): INTEGER 
		do
			Result := c_clang_get_completion_num_annotations (completion_string)
		ensure
			instance_free: class
		end

	clang_get_completion_annotation (completion_string: POINTER; annotation_number: INTEGER): detachable CXSTRING_STRUCT_API 
		do
			if attached c_clang_get_completion_annotation (completion_string, annotation_number) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	clang_get_completion_parent (completion_string: POINTER; kind: POINTER): detachable CXSTRING_STRUCT_API 
		do
			if attached c_clang_get_completion_parent (completion_string, kind) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	clang_get_completion_brief_comment (completion_string: POINTER): detachable CXSTRING_STRUCT_API 
		do
			if attached c_clang_get_completion_brief_comment (completion_string) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	clang_get_cursor_completion_string (cursor: CXCURSOR_STRUCT_API): POINTER 
		do
			Result := c_clang_get_cursor_completion_string (cursor.item)
		ensure
			instance_free: class
		end

	clang_get_completion_num_fix_its (results: CXCODE_COMPLETE_RESULTS_STRUCT_API; completion_index: INTEGER): INTEGER 
		do
			Result := c_clang_get_completion_num_fix_its (results.item, completion_index)
		ensure
			instance_free: class
		end

	clang_get_completion_fix_it (results: CXCODE_COMPLETE_RESULTS_STRUCT_API; completion_index: INTEGER; fixit_index: INTEGER; replacement_range: CXSOURCE_RANGE_STRUCT_API): detachable CXSTRING_STRUCT_API 
		do
			if attached c_clang_get_completion_fix_it (results.item, completion_index, fixit_index, replacement_range.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	clang_default_code_complete_options: INTEGER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_defaultCodeCompleteOptions ();
			]"
		end

	clang_code_complete_at (tu: CXTRANSLATION_UNIT_IMPL_STRUCT_API; complete_filename: STRING; complete_line: INTEGER; complete_column: INTEGER; unsaved_files: CXUNSAVED_FILE_STRUCT_API; num_unsaved_files: INTEGER; options: INTEGER): detachable CXCODE_COMPLETE_RESULTS_STRUCT_API 
		local
			complete_filename_c_string: C_STRING
		do
			create complete_filename_c_string.make (complete_filename)
			if attached c_clang_code_complete_at (tu.item, complete_filename_c_string.item, complete_line, complete_column, unsaved_files.item, num_unsaved_files, options) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	clang_sort_code_completion_results (results: CXCOMPLETION_RESULT_STRUCT_API; numresults: INTEGER) 
		do
			c_clang_sort_code_completion_results (results.item, numresults)
		ensure
			instance_free: class
		end

	clang_dispose_code_complete_results (results: CXCODE_COMPLETE_RESULTS_STRUCT_API) 
		do
			c_clang_dispose_code_complete_results (results.item)
		ensure
			instance_free: class
		end

	clang_code_complete_get_num_diagnostics (results: CXCODE_COMPLETE_RESULTS_STRUCT_API): INTEGER 
		do
			Result := c_clang_code_complete_get_num_diagnostics (results.item)
		ensure
			instance_free: class
		end

	clang_code_complete_get_diagnostic (results: CXCODE_COMPLETE_RESULTS_STRUCT_API; index: INTEGER): POINTER 
		do
			Result := c_clang_code_complete_get_diagnostic (results.item, index)
		ensure
			instance_free: class
		end

	clang_code_complete_get_contexts (results: CXCODE_COMPLETE_RESULTS_STRUCT_API): INTEGER 
		do
			Result := c_clang_code_complete_get_contexts (results.item)
		ensure
			instance_free: class
		end

	clang_code_complete_get_container_kind (results: CXCODE_COMPLETE_RESULTS_STRUCT_API; isincomplete: POINTER): INTEGER 
		do
			Result := c_clang_code_complete_get_container_kind (results.item, isincomplete)
		ensure
			instance_free: class
		end

	clang_code_complete_get_container_usr (results: CXCODE_COMPLETE_RESULTS_STRUCT_API): detachable CXSTRING_STRUCT_API 
		do
			if attached c_clang_code_complete_get_container_usr (results.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	clang_code_complete_get_obj_cselector (results: CXCODE_COMPLETE_RESULTS_STRUCT_API): detachable CXSTRING_STRUCT_API 
		do
			if attached c_clang_code_complete_get_obj_cselector (results.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	clang_get_clang_version: detachable CXSTRING_STRUCT_API 
		do
			if attached c_clang_get_clang_version as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	clang_toggle_crash_recovery (isenabled: INTEGER)
		external
			"C inline use <Index.h>"
		alias
			"[
				clang_toggleCrashRecovery ((unsigned)$isenabled);
			]"
		end

	clang_get_inclusions (tu: CXTRANSLATION_UNIT_IMPL_STRUCT_API; visitor: POINTER; client_data: POINTER) 
		do
			c_clang_get_inclusions (tu.item, visitor, client_data)
		ensure
			instance_free: class
		end

	clang_cursor_evaluate (c: CXCURSOR_STRUCT_API): POINTER 
		do
			Result := c_clang_cursor_evaluate (c.item)
		ensure
			instance_free: class
		end

	clang_eval_result_get_kind (e: POINTER): INTEGER 
		do
			Result := c_clang_eval_result_get_kind (e)
		ensure
			instance_free: class
		end

	clang_eval_result_get_as_int (e: POINTER): INTEGER 
		do
			Result := c_clang_eval_result_get_as_int (e)
		ensure
			instance_free: class
		end

	clang_eval_result_get_as_long_long (e: POINTER): INTEGER 
		do
			Result := c_clang_eval_result_get_as_long_long (e)
		ensure
			instance_free: class
		end

	clang_eval_result_is_unsigned_int (e: POINTER): INTEGER 
		do
			Result := c_clang_eval_result_is_unsigned_int (e)
		ensure
			instance_free: class
		end

	clang_eval_result_get_as_unsigned (e: POINTER): INTEGER 
		do
			Result := c_clang_eval_result_get_as_unsigned (e)
		ensure
			instance_free: class
		end

	clang_eval_result_get_as_double (e: POINTER): REAL_64 
		do
			Result := c_clang_eval_result_get_as_double (e)
		ensure
			instance_free: class
		end

	clang_eval_result_get_as_str (e: POINTER): POINTER 
		do
			Result := c_clang_eval_result_get_as_str (e)
		ensure
			instance_free: class
		end

	clang_eval_result_dispose (e: POINTER) 
		do
			c_clang_eval_result_dispose (e)
		ensure
			instance_free: class
		end

	clang_get_remappings (path: POINTER): POINTER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_getRemappings ((char const*)$path);
			]"
		end

	clang_get_remappings_from_file_list (filepaths: POINTER; numfiles: INTEGER): POINTER 
		do
			Result := c_clang_get_remappings_from_file_list (filepaths, numfiles)
		ensure
			instance_free: class
		end

	clang_remap_get_num_files (anonymous_1: POINTER): INTEGER 
		do
			Result := c_clang_remap_get_num_files (anonymous_1)
		ensure
			instance_free: class
		end

	clang_remap_get_filenames (anonymous_1: POINTER; index: INTEGER; original: CXSTRING_STRUCT_API; transformed: CXSTRING_STRUCT_API) 
		do
			c_clang_remap_get_filenames (anonymous_1, index, original.item, transformed.item)
		ensure
			instance_free: class
		end

	clang_remap_dispose (anonymous_1: POINTER) 
		do
			c_clang_remap_dispose (anonymous_1)
		ensure
			instance_free: class
		end

	clang_find_references_in_file (cursor: CXCURSOR_STRUCT_API; file: POINTER; visitor: CXCURSOR_AND_RANGE_VISITOR_STRUCT_API): INTEGER 
		do
			Result := c_clang_find_references_in_file (cursor.item, file, visitor.item)
		ensure
			instance_free: class
		end

	clang_find_includes_in_file (tu: CXTRANSLATION_UNIT_IMPL_STRUCT_API; file: POINTER; visitor: CXCURSOR_AND_RANGE_VISITOR_STRUCT_API): INTEGER 
		do
			Result := c_clang_find_includes_in_file (tu.item, file, visitor.item)
		ensure
			instance_free: class
		end

	clang_index_is_entity_obj_ccontainer_kind (anonymous_1: INTEGER): INTEGER 
		do
			Result := c_clang_index_is_entity_obj_ccontainer_kind (anonymous_1)
		ensure
			instance_free: class
		end

	clang_index_get_obj_ccontainer_decl_info (anonymous_1: CXIDX_DECL_INFO_STRUCT_API): detachable CXIDX_OBJ_CCONTAINER_DECL_INFO_STRUCT_API 
		do
			if attached c_clang_index_get_obj_ccontainer_decl_info (anonymous_1.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	clang_index_get_obj_cinterface_decl_info (anonymous_1: CXIDX_DECL_INFO_STRUCT_API): detachable CXIDX_OBJ_CINTERFACE_DECL_INFO_STRUCT_API 
		do
			if attached c_clang_index_get_obj_cinterface_decl_info (anonymous_1.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	clang_index_get_obj_ccategory_decl_info (anonymous_1: CXIDX_DECL_INFO_STRUCT_API): detachable CXIDX_OBJ_CCATEGORY_DECL_INFO_STRUCT_API 
		do
			if attached c_clang_index_get_obj_ccategory_decl_info (anonymous_1.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	clang_index_get_obj_cprotocol_ref_list_info (anonymous_1: CXIDX_DECL_INFO_STRUCT_API): detachable CXIDX_OBJ_CPROTOCOL_REF_LIST_INFO_STRUCT_API 
		do
			if attached c_clang_index_get_obj_cprotocol_ref_list_info (anonymous_1.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	clang_index_get_obj_cproperty_decl_info (anonymous_1: CXIDX_DECL_INFO_STRUCT_API): detachable CXIDX_OBJ_CPROPERTY_DECL_INFO_STRUCT_API 
		do
			if attached c_clang_index_get_obj_cproperty_decl_info (anonymous_1.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	clang_index_get_iboutlet_collection_attr_info (anonymous_1: CXIDX_ATTR_INFO_STRUCT_API): detachable CXIDX_IBOUTLET_COLLECTION_ATTR_INFO_STRUCT_API 
		do
			if attached c_clang_index_get_iboutlet_collection_attr_info (anonymous_1.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	clang_index_get_cxxclass_decl_info (anonymous_1: CXIDX_DECL_INFO_STRUCT_API): detachable CXIDX_CXXCLASS_DECL_INFO_STRUCT_API 
		do
			if attached c_clang_index_get_cxxclass_decl_info (anonymous_1.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	clang_index_get_client_container (anonymous_1: CXIDX_CONTAINER_INFO_STRUCT_API): POINTER 
		do
			Result := c_clang_index_get_client_container (anonymous_1.item)
		ensure
			instance_free: class
		end

	clang_index_set_client_container (anonymous_1: CXIDX_CONTAINER_INFO_STRUCT_API; anonymous_2: POINTER) 
		do
			c_clang_index_set_client_container (anonymous_1.item, anonymous_2)
		ensure
			instance_free: class
		end

	clang_index_get_client_entity (anonymous_1: CXIDX_ENTITY_INFO_STRUCT_API): POINTER 
		do
			Result := c_clang_index_get_client_entity (anonymous_1.item)
		ensure
			instance_free: class
		end

	clang_index_set_client_entity (anonymous_1: CXIDX_ENTITY_INFO_STRUCT_API; anonymous_2: POINTER) 
		do
			c_clang_index_set_client_entity (anonymous_1.item, anonymous_2)
		ensure
			instance_free: class
		end

	clang_index_action_create (cidx: POINTER): POINTER 
		do
			Result := c_clang_index_action_create (cidx)
		ensure
			instance_free: class
		end

	clang_index_action_dispose (anonymous_1: POINTER) 
		do
			c_clang_index_action_dispose (anonymous_1)
		ensure
			instance_free: class
		end

	clang_index_source_file (anonymous_1: POINTER; client_data: POINTER; index_callbacks: INDEXER_CALLBACKS_STRUCT_API; index_callbacks_size: INTEGER; index_options: INTEGER; source_filename: STRING; command_line_args: POINTER; num_command_line_args: INTEGER; unsaved_files: CXUNSAVED_FILE_STRUCT_API; num_unsaved_files: INTEGER; out_tu: CXTRANSLATION_UNIT_IMPL_STRUCT_API; tu_options: INTEGER): INTEGER 
		local
			source_filename_c_string: C_STRING
		do
			create source_filename_c_string.make (source_filename)
			Result := c_clang_index_source_file (anonymous_1, client_data, index_callbacks.item, index_callbacks_size, index_options, source_filename_c_string.item, command_line_args, num_command_line_args, unsaved_files.item, num_unsaved_files, out_tu.item, tu_options)
		ensure
			instance_free: class
		end

	clang_index_source_file_full_argv (anonymous_1: POINTER; client_data: POINTER; index_callbacks: INDEXER_CALLBACKS_STRUCT_API; index_callbacks_size: INTEGER; index_options: INTEGER; source_filename: STRING; command_line_args: POINTER; num_command_line_args: INTEGER; unsaved_files: CXUNSAVED_FILE_STRUCT_API; num_unsaved_files: INTEGER; out_tu: CXTRANSLATION_UNIT_IMPL_STRUCT_API; tu_options: INTEGER): INTEGER 
		local
			source_filename_c_string: C_STRING
		do
			create source_filename_c_string.make (source_filename)
			Result := c_clang_index_source_file_full_argv (anonymous_1, client_data, index_callbacks.item, index_callbacks_size, index_options, source_filename_c_string.item, command_line_args, num_command_line_args, unsaved_files.item, num_unsaved_files, out_tu.item, tu_options)
		ensure
			instance_free: class
		end

	clang_index_translation_unit (anonymous_1: POINTER; client_data: POINTER; index_callbacks: INDEXER_CALLBACKS_STRUCT_API; index_callbacks_size: INTEGER; index_options: INTEGER; anonymous_6: CXTRANSLATION_UNIT_IMPL_STRUCT_API): INTEGER 
		do
			Result := c_clang_index_translation_unit (anonymous_1, client_data, index_callbacks.item, index_callbacks_size, index_options, anonymous_6.item)
		ensure
			instance_free: class
		end

	clang_index_loc_get_file_location (loc: CXIDX_LOC_STRUCT_API; indexfile: POINTER; file: POINTER; line: POINTER; column: POINTER; offset: POINTER) 
		do
			c_clang_index_loc_get_file_location (loc.item, indexfile, file, line, column, offset)
		ensure
			instance_free: class
		end

	clang_index_loc_get_cxsource_location (loc: CXIDX_LOC_STRUCT_API): detachable CXSOURCE_LOCATION_STRUCT_API 
		do
			if attached c_clang_index_loc_get_cxsource_location (loc.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	clang_type_visit_fields (t: CXTYPE_STRUCT_API; visitor: POINTER; client_data: POINTER): INTEGER 
		do
			Result := c_clang_type_visit_fields (t.item, visitor, client_data)
		ensure
			instance_free: class
		end

feature -- Externals

	c_clang_dispose_index (index: POINTER)
		external
			"C inline use <Index.h>"
		alias
			"[
				clang_disposeIndex ((CXIndex)$index);
			]"
		end

	c_clang_cxindex_set_global_options (anonymous_1: POINTER; options: INTEGER)
		external
			"C inline use <Index.h>"
		alias
			"[
				clang_CXIndex_setGlobalOptions ((CXIndex)$anonymous_1, (unsigned)$options);
			]"
		end

	c_clang_cxindex_get_global_options (anonymous_1: POINTER): INTEGER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_CXIndex_getGlobalOptions ((CXIndex)$anonymous_1);
			]"
		end

	c_clang_cxindex_set_invocation_emission_path_option (anonymous_1: POINTER; path: POINTER)
		external
			"C inline use <Index.h>"
		alias
			"[
				clang_CXIndex_setInvocationEmissionPathOption ((CXIndex)$anonymous_1, (char const*)$path);
			]"
		end

	c_clang_get_file_name (sfile: POINTER): POINTER
		external
			"C inline use <Index.h>"

		alias
			"[
				CXString *result = (CXString*) malloc (sizeof(CXString));
				*result = clang_getFileName ((CXFile)$sfile);
				return result;
			]"
		end

	c_clang_get_file_time (sfile: POINTER): INTEGER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_getFileTime ((CXFile)$sfile);
			]"
		end

	c_clang_get_file_unique_id (file: POINTER; outid: POINTER): INTEGER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_getFileUniqueID ((CXFile)$file, (CXFileUniqueID*)$outid);
			]"
		end

	c_clang_is_file_multiple_include_guarded (tu: POINTER; file: POINTER): INTEGER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_isFileMultipleIncludeGuarded ((CXTranslationUnit)$tu, (CXFile)$file);
			]"
		end

	c_clang_get_file (tu: POINTER; file_name: POINTER): POINTER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_getFile ((CXTranslationUnit)$tu, (char const*)$file_name);
			]"
		end

	c_clang_get_file_contents (tu: POINTER; file: POINTER; size: POINTER): POINTER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_getFileContents ((CXTranslationUnit)$tu, (CXFile)$file, (size_t*)$size);
			]"
		end

	c_clang_file_is_equal (file1: POINTER; file2: POINTER): INTEGER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_File_isEqual ((CXFile)$file1, (CXFile)$file2);
			]"
		end

	c_clang_file_try_get_real_path_name (file: POINTER): POINTER
		external
			"C inline use <Index.h>"

		alias
			"[
				CXString *result = (CXString*) malloc (sizeof(CXString));
				*result = clang_File_tryGetRealPathName ((CXFile)$file);
				return result;
			]"
		end

	c_clang_get_null_location: POINTER
		external
			"C inline use <Index.h>"

		alias
			"[
				CXSourceLocation *result = (CXSourceLocation*) malloc (sizeof(CXSourceLocation));
				*result = clang_getNullLocation ();
				return result;
			]"
		end

	c_clang_equal_locations (loc1: POINTER; loc2: POINTER): INTEGER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_equalLocations (*(CXSourceLocation*)$loc1, *(CXSourceLocation*)$loc2);
			]"
		end

	c_clang_get_location (tu: POINTER; file: POINTER; line: INTEGER; column: INTEGER): POINTER
		external
			"C inline use <Index.h>"

		alias
			"[
				CXSourceLocation *result = (CXSourceLocation*) malloc (sizeof(CXSourceLocation));
				*result = clang_getLocation ((CXTranslationUnit)$tu, (CXFile)$file, (unsigned)$line, (unsigned)$column);
				return result;
			]"
		end

	c_clang_get_location_for_offset (tu: POINTER; file: POINTER; offset: INTEGER): POINTER
		external
			"C inline use <Index.h>"

		alias
			"[
				CXSourceLocation *result = (CXSourceLocation*) malloc (sizeof(CXSourceLocation));
				*result = clang_getLocationForOffset ((CXTranslationUnit)$tu, (CXFile)$file, (unsigned)$offset);
				return result;
			]"
		end

	c_clang_location_is_in_system_header (location: POINTER): INTEGER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_Location_isInSystemHeader (*(CXSourceLocation*)$location);
			]"
		end

	c_clang_location_is_from_main_file (location: POINTER): INTEGER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_Location_isFromMainFile (*(CXSourceLocation*)$location);
			]"
		end

	c_clang_get_null_range: POINTER
		external
			"C inline use <Index.h>"

		alias
			"[
				CXSourceRange *result = (CXSourceRange*) malloc (sizeof(CXSourceRange));
				*result = clang_getNullRange ();
				return result;
			]"
		end

	c_clang_get_range (begin: POINTER; a_end: POINTER): POINTER
		external
			"C inline use <Index.h>"

		alias
			"[
				CXSourceRange *result = (CXSourceRange*) malloc (sizeof(CXSourceRange));
				*result = clang_getRange (*(CXSourceLocation*)$begin, *(CXSourceLocation*)$a_end);
				return result;
			]"
		end

	c_clang_equal_ranges (range1: POINTER; range2: POINTER): INTEGER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_equalRanges (*(CXSourceRange*)$range1, *(CXSourceRange*)$range2);
			]"
		end

	c_clang_range_is_null (range: POINTER): INTEGER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_Range_isNull (*(CXSourceRange*)$range);
			]"
		end

	c_clang_get_expansion_location (location: POINTER; file: POINTER; line: POINTER; column: POINTER; offset: POINTER)
		external
			"C inline use <Index.h>"
		alias
			"[
				clang_getExpansionLocation (*(CXSourceLocation*)$location, (CXFile*)$file, (unsigned*)$line, (unsigned*)$column, (unsigned*)$offset);
			]"
		end

	c_clang_get_presumed_location (location: POINTER; filename: POINTER; line: POINTER; column: POINTER)
		external
			"C inline use <Index.h>"
		alias
			"[
				clang_getPresumedLocation (*(CXSourceLocation*)$location, (CXString*)$filename, (unsigned*)$line, (unsigned*)$column);
			]"
		end

	c_clang_get_instantiation_location (location: POINTER; file: POINTER; line: POINTER; column: POINTER; offset: POINTER)
		external
			"C inline use <Index.h>"
		alias
			"[
				clang_getInstantiationLocation (*(CXSourceLocation*)$location, (CXFile*)$file, (unsigned*)$line, (unsigned*)$column, (unsigned*)$offset);
			]"
		end

	c_clang_get_spelling_location (location: POINTER; file: POINTER; line: POINTER; column: POINTER; offset: POINTER)
		external
			"C inline use <Index.h>"
		alias
			"[
				clang_getSpellingLocation (*(CXSourceLocation*)$location, (CXFile*)$file, (unsigned*)$line, (unsigned*)$column, (unsigned*)$offset);
			]"
		end

	c_clang_get_file_location (location: POINTER; file: POINTER; line: POINTER; column: POINTER; offset: POINTER)
		external
			"C inline use <Index.h>"
		alias
			"[
				clang_getFileLocation (*(CXSourceLocation*)$location, (CXFile*)$file, (unsigned*)$line, (unsigned*)$column, (unsigned*)$offset);
			]"
		end

	c_clang_get_range_start (range: POINTER): POINTER
		external
			"C inline use <Index.h>"

		alias
			"[
				CXSourceLocation *result = (CXSourceLocation*) malloc (sizeof(CXSourceLocation));
				*result = clang_getRangeStart (*(CXSourceRange*)$range);
				return result;
			]"
		end

	c_clang_get_range_end (range: POINTER): POINTER
		external
			"C inline use <Index.h>"

		alias
			"[
				CXSourceLocation *result = (CXSourceLocation*) malloc (sizeof(CXSourceLocation));
				*result = clang_getRangeEnd (*(CXSourceRange*)$range);
				return result;
			]"
		end

	c_clang_get_skipped_ranges (tu: POINTER; file: POINTER): POINTER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_getSkippedRanges ((CXTranslationUnit)$tu, (CXFile)$file);
			]"
		end

	c_clang_get_all_skipped_ranges (tu: POINTER): POINTER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_getAllSkippedRanges ((CXTranslationUnit)$tu);
			]"
		end

	c_clang_dispose_source_range_list (ranges: POINTER)
		external
			"C inline use <Index.h>"
		alias
			"[
				clang_disposeSourceRangeList ((CXSourceRangeList*)$ranges);
			]"
		end

	c_clang_get_num_diagnostics_in_set (diags: POINTER): INTEGER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_getNumDiagnosticsInSet ((CXDiagnosticSet)$diags);
			]"
		end

	c_clang_get_diagnostic_in_set (diags: POINTER; index: INTEGER): POINTER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_getDiagnosticInSet ((CXDiagnosticSet)$diags, (unsigned)$index);
			]"
		end

	c_clang_load_diagnostics (file: POINTER; error: POINTER; errorstring: POINTER): POINTER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_loadDiagnostics ((char const*)$file, (enum CXLoadDiag_Error*)$error, (CXString*)$errorstring);
			]"
		end

	c_clang_dispose_diagnostic_set (diags: POINTER)
		external
			"C inline use <Index.h>"
		alias
			"[
				clang_disposeDiagnosticSet ((CXDiagnosticSet)$diags);
			]"
		end

	c_clang_get_child_diagnostics (d: POINTER): POINTER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_getChildDiagnostics ((CXDiagnostic)$d);
			]"
		end

	c_clang_get_num_diagnostics (unit: POINTER): INTEGER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_getNumDiagnostics ((CXTranslationUnit)$unit);
			]"
		end

	c_clang_get_diagnostic (unit: POINTER; index: INTEGER): POINTER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_getDiagnostic ((CXTranslationUnit)$unit, (unsigned)$index);
			]"
		end

	c_clang_get_diagnostic_set_from_tu (unit: POINTER): POINTER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_getDiagnosticSetFromTU ((CXTranslationUnit)$unit);
			]"
		end

	c_clang_dispose_diagnostic (diagnostic: POINTER)
		external
			"C inline use <Index.h>"
		alias
			"[
				clang_disposeDiagnostic ((CXDiagnostic)$diagnostic);
			]"
		end

	c_clang_format_diagnostic (diagnostic: POINTER; options: INTEGER): POINTER
		external
			"C inline use <Index.h>"

		alias
			"[
				CXString *result = (CXString*) malloc (sizeof(CXString));
				*result = clang_formatDiagnostic ((CXDiagnostic)$diagnostic, (unsigned)$options);
				return result;
			]"
		end

	c_clang_get_diagnostic_severity (anonymous_1: POINTER): INTEGER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_getDiagnosticSeverity ((CXDiagnostic)$anonymous_1);
			]"
		end

	c_clang_get_diagnostic_location (anonymous_1: POINTER): POINTER
		external
			"C inline use <Index.h>"

		alias
			"[
				CXSourceLocation *result = (CXSourceLocation*) malloc (sizeof(CXSourceLocation));
				*result = clang_getDiagnosticLocation ((CXDiagnostic)$anonymous_1);
				return result;
			]"
		end

	c_clang_get_diagnostic_spelling (anonymous_1: POINTER): POINTER
		external
			"C inline use <Index.h>"

		alias
			"[
				CXString *result = (CXString*) malloc (sizeof(CXString));
				*result = clang_getDiagnosticSpelling ((CXDiagnostic)$anonymous_1);
				return result;
			]"
		end

	c_clang_get_diagnostic_option (diag: POINTER; disable: POINTER): POINTER
		external
			"C inline use <Index.h>"

		alias
			"[
				CXString *result = (CXString*) malloc (sizeof(CXString));
				*result = clang_getDiagnosticOption ((CXDiagnostic)$diag, (CXString*)$disable);
				return result;
			]"
		end

	c_clang_get_diagnostic_category (anonymous_1: POINTER): INTEGER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_getDiagnosticCategory ((CXDiagnostic)$anonymous_1);
			]"
		end

	c_clang_get_diagnostic_category_text (anonymous_1: POINTER): POINTER
		external
			"C inline use <Index.h>"

		alias
			"[
				CXString *result = (CXString*) malloc (sizeof(CXString));
				*result = clang_getDiagnosticCategoryText ((CXDiagnostic)$anonymous_1);
				return result;
			]"
		end

	c_clang_get_diagnostic_num_ranges (anonymous_1: POINTER): INTEGER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_getDiagnosticNumRanges ((CXDiagnostic)$anonymous_1);
			]"
		end

	c_clang_get_diagnostic_range (diagnostic: POINTER; range: INTEGER): POINTER
		external
			"C inline use <Index.h>"

		alias
			"[
				CXSourceRange *result = (CXSourceRange*) malloc (sizeof(CXSourceRange));
				*result = clang_getDiagnosticRange ((CXDiagnostic)$diagnostic, (unsigned)$range);
				return result;
			]"
		end

	c_clang_get_diagnostic_num_fix_its (diagnostic: POINTER): INTEGER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_getDiagnosticNumFixIts ((CXDiagnostic)$diagnostic);
			]"
		end

	c_clang_get_diagnostic_fix_it (diagnostic: POINTER; fixit: INTEGER; replacementrange: POINTER): POINTER
		external
			"C inline use <Index.h>"

		alias
			"[
				CXString *result = (CXString*) malloc (sizeof(CXString));
				*result = clang_getDiagnosticFixIt ((CXDiagnostic)$diagnostic, (unsigned)$fixit, (CXSourceRange*)$replacementrange);
				return result;
			]"
		end

	c_clang_get_translation_unit_spelling (ctunit: POINTER): POINTER
		external
			"C inline use <Index.h>"

		alias
			"[
				CXString *result = (CXString*) malloc (sizeof(CXString));
				*result = clang_getTranslationUnitSpelling ((CXTranslationUnit)$ctunit);
				return result;
			]"
		end

	c_clang_create_translation_unit_from_source_file (cidx: POINTER; source_filename: POINTER; num_clang_command_line_args: INTEGER; clang_command_line_args: POINTER; num_unsaved_files: INTEGER; unsaved_files: POINTER): POINTER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_createTranslationUnitFromSourceFile ((CXIndex)$cidx, (char const*)$source_filename, (int)$num_clang_command_line_args, (char const*const *)$clang_command_line_args, (unsigned)$num_unsaved_files, (struct CXUnsavedFile*)$unsaved_files);
			]"
		end

	c_clang_create_translation_unit (cidx: POINTER; ast_filename: POINTER): POINTER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_createTranslationUnit ((CXIndex)$cidx, (char const*)$ast_filename);
			]"
		end

	c_clang_create_translation_unit2 (cidx: POINTER; ast_filename: POINTER; out_tu: POINTER): INTEGER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_createTranslationUnit2 ((CXIndex)$cidx, (char const*)$ast_filename, (CXTranslationUnit*)$out_tu);
			]"
		end

	c_clang_parse_translation_unit (cidx: POINTER; source_filename: POINTER; command_line_args: POINTER; num_command_line_args: INTEGER; unsaved_files: POINTER; num_unsaved_files: INTEGER; options: INTEGER): POINTER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_parseTranslationUnit ((CXIndex)$cidx, (char const*)$source_filename, (char const*const *)$command_line_args, (int)$num_command_line_args, (struct CXUnsavedFile*)$unsaved_files, (unsigned)$num_unsaved_files, (unsigned)$options);
			]"
		end

	c_clang_parse_translation_unit2 (cidx: POINTER; source_filename: POINTER; command_line_args: POINTER; num_command_line_args: INTEGER; unsaved_files: POINTER; num_unsaved_files: INTEGER; options: INTEGER; out_tu: POINTER): INTEGER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_parseTranslationUnit2 ((CXIndex)$cidx, (char const*)$source_filename, (char const*const *)$command_line_args, (int)$num_command_line_args, (struct CXUnsavedFile*)$unsaved_files, (unsigned)$num_unsaved_files, (unsigned)$options, (CXTranslationUnit*)$out_tu);
			]"
		end

	c_clang_parse_translation_unit2full_argv (cidx: POINTER; source_filename: POINTER; command_line_args: POINTER; num_command_line_args: INTEGER; unsaved_files: POINTER; num_unsaved_files: INTEGER; options: INTEGER; out_tu: POINTER): INTEGER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_parseTranslationUnit2FullArgv ((CXIndex)$cidx, (char const*)$source_filename, (char const*const *)$command_line_args, (int)$num_command_line_args, (struct CXUnsavedFile*)$unsaved_files, (unsigned)$num_unsaved_files, (unsigned)$options, (CXTranslationUnit*)$out_tu);
			]"
		end

	c_clang_default_save_options (tu: POINTER): INTEGER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_defaultSaveOptions ((CXTranslationUnit)$tu);
			]"
		end

	c_clang_save_translation_unit (tu: POINTER; filename: POINTER; options: INTEGER): INTEGER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_saveTranslationUnit ((CXTranslationUnit)$tu, (char const*)$filename, (unsigned)$options);
			]"
		end

	c_clang_suspend_translation_unit (anonymous_1: POINTER): INTEGER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_suspendTranslationUnit ((CXTranslationUnit)$anonymous_1);
			]"
		end

	c_clang_dispose_translation_unit (anonymous_1: POINTER)
		external
			"C inline use <Index.h>"
		alias
			"[
				clang_disposeTranslationUnit ((CXTranslationUnit)$anonymous_1);
			]"
		end

	c_clang_default_reparse_options (tu: POINTER): INTEGER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_defaultReparseOptions ((CXTranslationUnit)$tu);
			]"
		end

	c_clang_reparse_translation_unit (tu: POINTER; num_unsaved_files: INTEGER; unsaved_files: POINTER; options: INTEGER): INTEGER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_reparseTranslationUnit ((CXTranslationUnit)$tu, (unsigned)$num_unsaved_files, (struct CXUnsavedFile*)$unsaved_files, (unsigned)$options);
			]"
		end

	c_clang_get_turesource_usage_name (kind: INTEGER): POINTER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_getTUResourceUsageName ((enum CXTUResourceUsageKind)$kind);
			]"
		end

	c_clang_get_cxturesource_usage (tu: POINTER): POINTER
		external
			"C inline use <Index.h>"

		alias
			"[
				CXTUResourceUsage *result = (CXTUResourceUsage*) malloc (sizeof(CXTUResourceUsage));
				*result = clang_getCXTUResourceUsage ((CXTranslationUnit)$tu);
				return result;
			]"
		end

	c_clang_dispose_cxturesource_usage (usage: POINTER)
		external
			"C inline use <Index.h>"
		alias
			"[
				clang_disposeCXTUResourceUsage (*(CXTUResourceUsage*)$usage);
			]"
		end

	c_clang_get_translation_unit_target_info (ctunit: POINTER): POINTER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_getTranslationUnitTargetInfo ((CXTranslationUnit)$ctunit);
			]"
		end

	c_clang_target_info_dispose (info: POINTER)
		external
			"C inline use <Index.h>"
		alias
			"[
				clang_TargetInfo_dispose ((CXTargetInfo)$info);
			]"
		end

	c_clang_target_info_get_triple (info: POINTER): POINTER
		external
			"C inline use <Index.h>"

		alias
			"[
				CXString *result = (CXString*) malloc (sizeof(CXString));
				*result = clang_TargetInfo_getTriple ((CXTargetInfo)$info);
				return result;
			]"
		end

	c_clang_target_info_get_pointer_width (info: POINTER): INTEGER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_TargetInfo_getPointerWidth ((CXTargetInfo)$info);
			]"
		end

	c_clang_get_null_cursor: POINTER
		external
			"C inline use <Index.h>"

		alias
			"[
				CXCursor *result = (CXCursor*) malloc (sizeof(CXCursor));
				*result = clang_getNullCursor ();
				return result;
			]"
		end

	c_clang_get_translation_unit_cursor (anonymous_1: POINTER): POINTER
		external
			"C inline use <Index.h>"

		alias
			"[
				CXCursor *result = (CXCursor*) malloc (sizeof(CXCursor));
				*result = clang_getTranslationUnitCursor ((CXTranslationUnit)$anonymous_1);
				return result;
			]"
		end

	c_clang_equal_cursors (anonymous_1: POINTER; anonymous_2: POINTER): INTEGER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_equalCursors (*(CXCursor*)$anonymous_1, *(CXCursor*)$anonymous_2);
			]"
		end

	c_clang_cursor_is_null (cursor: POINTER): INTEGER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_Cursor_isNull (*(CXCursor*)$cursor);
			]"
		end

	c_clang_hash_cursor (anonymous_1: POINTER): INTEGER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_hashCursor (*(CXCursor*)$anonymous_1);
			]"
		end

	c_clang_get_cursor_kind (anonymous_1: POINTER): INTEGER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_getCursorKind (*(CXCursor*)$anonymous_1);
			]"
		end

	c_clang_is_declaration (anonymous_1: INTEGER): INTEGER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_isDeclaration ((enum CXCursorKind)$anonymous_1);
			]"
		end

	c_clang_is_invalid_declaration (anonymous_1: POINTER): INTEGER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_isInvalidDeclaration (*(CXCursor*)$anonymous_1);
			]"
		end

	c_clang_is_reference (anonymous_1: INTEGER): INTEGER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_isReference ((enum CXCursorKind)$anonymous_1);
			]"
		end

	c_clang_is_expression (anonymous_1: INTEGER): INTEGER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_isExpression ((enum CXCursorKind)$anonymous_1);
			]"
		end

	c_clang_is_statement (anonymous_1: INTEGER): INTEGER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_isStatement ((enum CXCursorKind)$anonymous_1);
			]"
		end

	c_clang_is_attribute (anonymous_1: INTEGER): INTEGER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_isAttribute ((enum CXCursorKind)$anonymous_1);
			]"
		end

	c_clang_cursor_has_attrs (c: POINTER): INTEGER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_Cursor_hasAttrs (*(CXCursor*)$c);
			]"
		end

	c_clang_is_invalid (anonymous_1: INTEGER): INTEGER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_isInvalid ((enum CXCursorKind)$anonymous_1);
			]"
		end

	c_clang_is_translation_unit (anonymous_1: INTEGER): INTEGER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_isTranslationUnit ((enum CXCursorKind)$anonymous_1);
			]"
		end

	c_clang_is_preprocessing (anonymous_1: INTEGER): INTEGER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_isPreprocessing ((enum CXCursorKind)$anonymous_1);
			]"
		end

	c_clang_is_unexposed (anonymous_1: INTEGER): INTEGER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_isUnexposed ((enum CXCursorKind)$anonymous_1);
			]"
		end

	c_clang_get_cursor_linkage (cursor: POINTER): INTEGER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_getCursorLinkage (*(CXCursor*)$cursor);
			]"
		end

	c_clang_get_cursor_visibility (cursor: POINTER): INTEGER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_getCursorVisibility (*(CXCursor*)$cursor);
			]"
		end

	c_clang_get_cursor_availability (cursor: POINTER): INTEGER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_getCursorAvailability (*(CXCursor*)$cursor);
			]"
		end

	c_clang_get_cursor_platform_availability (cursor: POINTER; always_deprecated: POINTER; deprecated_message: POINTER; always_unavailable: POINTER; unavailable_message: POINTER; availability: POINTER; availability_size: INTEGER): INTEGER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_getCursorPlatformAvailability (*(CXCursor*)$cursor, (int*)$always_deprecated, (CXString*)$deprecated_message, (int*)$always_unavailable, (CXString*)$unavailable_message, (CXPlatformAvailability*)$availability, (int)$availability_size);
			]"
		end

	c_clang_dispose_cxplatform_availability (availability: POINTER)
		external
			"C inline use <Index.h>"
		alias
			"[
				clang_disposeCXPlatformAvailability ((CXPlatformAvailability*)$availability);
			]"
		end

	c_clang_get_cursor_language (cursor: POINTER): INTEGER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_getCursorLanguage (*(CXCursor*)$cursor);
			]"
		end

	c_clang_get_cursor_tlskind (cursor: POINTER): INTEGER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_getCursorTLSKind (*(CXCursor*)$cursor);
			]"
		end

	c_clang_cursor_get_translation_unit (anonymous_1: POINTER): POINTER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_Cursor_getTranslationUnit (*(CXCursor*)$anonymous_1);
			]"
		end

	c_clang_create_cxcursor_set: POINTER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_createCXCursorSet ();
			]"
		end

	c_clang_dispose_cxcursor_set (cset: POINTER)
		external
			"C inline use <Index.h>"
		alias
			"[
				clang_disposeCXCursorSet ((CXCursorSet)$cset);
			]"
		end

	c_clang_cxcursor_set_contains (cset: POINTER; cursor: POINTER): INTEGER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_CXCursorSet_contains ((CXCursorSet)$cset, *(CXCursor*)$cursor);
			]"
		end

	c_clang_cxcursor_set_insert (cset: POINTER; cursor: POINTER): INTEGER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_CXCursorSet_insert ((CXCursorSet)$cset, *(CXCursor*)$cursor);
			]"
		end

	c_clang_get_cursor_semantic_parent (cursor: POINTER): POINTER
		external
			"C inline use <Index.h>"

		alias
			"[
				CXCursor *result = (CXCursor*) malloc (sizeof(CXCursor));
				*result = clang_getCursorSemanticParent (*(CXCursor*)$cursor);
				return result;
			]"
		end

	c_clang_get_cursor_lexical_parent (cursor: POINTER): POINTER
		external
			"C inline use <Index.h>"

		alias
			"[
				CXCursor *result = (CXCursor*) malloc (sizeof(CXCursor));
				*result = clang_getCursorLexicalParent (*(CXCursor*)$cursor);
				return result;
			]"
		end

	c_clang_get_overridden_cursors (cursor: POINTER; overridden: POINTER; num_overridden: POINTER)
		external
			"C inline use <Index.h>"
		alias
			"[
				clang_getOverriddenCursors (*(CXCursor*)$cursor, (CXCursor**)$overridden, (unsigned*)$num_overridden);
			]"
		end

	c_clang_dispose_overridden_cursors (overridden: POINTER)
		external
			"C inline use <Index.h>"
		alias
			"[
				clang_disposeOverriddenCursors ((CXCursor*)$overridden);
			]"
		end

	c_clang_get_included_file (cursor: POINTER): POINTER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_getIncludedFile (*(CXCursor*)$cursor);
			]"
		end

	c_clang_get_cursor (anonymous_1: POINTER; anonymous_2: POINTER): POINTER
		external
			"C inline use <Index.h>"

		alias
			"[
				CXCursor *result = (CXCursor*) malloc (sizeof(CXCursor));
				*result = clang_getCursor ((CXTranslationUnit)$anonymous_1, *(CXSourceLocation*)$anonymous_2);
				return result;
			]"
		end

	c_clang_get_cursor_location (anonymous_1: POINTER): POINTER
		external
			"C inline use <Index.h>"

		alias
			"[
				CXSourceLocation *result = (CXSourceLocation*) malloc (sizeof(CXSourceLocation));
				*result = clang_getCursorLocation (*(CXCursor*)$anonymous_1);
				return result;
			]"
		end

	c_clang_get_cursor_extent (anonymous_1: POINTER): POINTER
		external
			"C inline use <Index.h>"

		alias
			"[
				CXSourceRange *result = (CXSourceRange*) malloc (sizeof(CXSourceRange));
				*result = clang_getCursorExtent (*(CXCursor*)$anonymous_1);
				return result;
			]"
		end

	c_clang_get_cursor_type (c: POINTER): POINTER
		external
			"C inline use <Index.h>"

		alias
			"[
				CXType *result = (CXType*) malloc (sizeof(CXType));
				*result = clang_getCursorType (*(CXCursor*)$c);
				return result;
			]"
		end

	c_clang_get_type_spelling (ct: POINTER): POINTER
		external
			"C inline use <Index.h>"

		alias
			"[
				CXString *result = (CXString*) malloc (sizeof(CXString));
				*result = clang_getTypeSpelling (*(CXType*)$ct);
				return result;
			]"
		end

	c_clang_get_typedef_decl_underlying_type (c: POINTER): POINTER
		external
			"C inline use <Index.h>"

		alias
			"[
				CXType *result = (CXType*) malloc (sizeof(CXType));
				*result = clang_getTypedefDeclUnderlyingType (*(CXCursor*)$c);
				return result;
			]"
		end

	c_clang_get_enum_decl_integer_type (c: POINTER): POINTER
		external
			"C inline use <Index.h>"

		alias
			"[
				CXType *result = (CXType*) malloc (sizeof(CXType));
				*result = clang_getEnumDeclIntegerType (*(CXCursor*)$c);
				return result;
			]"
		end

	c_clang_get_enum_constant_decl_value (c: POINTER): INTEGER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_getEnumConstantDeclValue (*(CXCursor*)$c);
			]"
		end

	c_clang_get_enum_constant_decl_unsigned_value (c: POINTER): INTEGER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_getEnumConstantDeclUnsignedValue (*(CXCursor*)$c);
			]"
		end

	c_clang_get_field_decl_bit_width (c: POINTER): INTEGER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_getFieldDeclBitWidth (*(CXCursor*)$c);
			]"
		end

	c_clang_cursor_get_num_arguments (c: POINTER): INTEGER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_Cursor_getNumArguments (*(CXCursor*)$c);
			]"
		end

	c_clang_cursor_get_argument (c: POINTER; i: INTEGER): POINTER
		external
			"C inline use <Index.h>"

		alias
			"[
				CXCursor *result = (CXCursor*) malloc (sizeof(CXCursor));
				*result = clang_Cursor_getArgument (*(CXCursor*)$c, (unsigned)$i);
				return result;
			]"
		end

	c_clang_cursor_get_num_template_arguments (c: POINTER): INTEGER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_Cursor_getNumTemplateArguments (*(CXCursor*)$c);
			]"
		end

	c_clang_cursor_get_template_argument_kind (c: POINTER; i: INTEGER): INTEGER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_Cursor_getTemplateArgumentKind (*(CXCursor*)$c, (unsigned)$i);
			]"
		end

	c_clang_cursor_get_template_argument_type (c: POINTER; i: INTEGER): POINTER
		external
			"C inline use <Index.h>"

		alias
			"[
				CXType *result = (CXType*) malloc (sizeof(CXType));
				*result = clang_Cursor_getTemplateArgumentType (*(CXCursor*)$c, (unsigned)$i);
				return result;
			]"
		end

	c_clang_cursor_get_template_argument_value (c: POINTER; i: INTEGER): INTEGER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_Cursor_getTemplateArgumentValue (*(CXCursor*)$c, (unsigned)$i);
			]"
		end

	c_clang_cursor_get_template_argument_unsigned_value (c: POINTER; i: INTEGER): INTEGER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_Cursor_getTemplateArgumentUnsignedValue (*(CXCursor*)$c, (unsigned)$i);
			]"
		end

	c_clang_equal_types (a: POINTER; b: POINTER): INTEGER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_equalTypes (*(CXType*)$a, *(CXType*)$b);
			]"
		end

	c_clang_get_canonical_type (t: POINTER): POINTER
		external
			"C inline use <Index.h>"

		alias
			"[
				CXType *result = (CXType*) malloc (sizeof(CXType));
				*result = clang_getCanonicalType (*(CXType*)$t);
				return result;
			]"
		end

	c_clang_is_const_qualified_type (t: POINTER): INTEGER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_isConstQualifiedType (*(CXType*)$t);
			]"
		end

	c_clang_cursor_is_macro_function_like (c: POINTER): INTEGER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_Cursor_isMacroFunctionLike (*(CXCursor*)$c);
			]"
		end

	c_clang_cursor_is_macro_builtin (c: POINTER): INTEGER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_Cursor_isMacroBuiltin (*(CXCursor*)$c);
			]"
		end

	c_clang_cursor_is_function_inlined (c: POINTER): INTEGER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_Cursor_isFunctionInlined (*(CXCursor*)$c);
			]"
		end

	c_clang_is_volatile_qualified_type (t: POINTER): INTEGER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_isVolatileQualifiedType (*(CXType*)$t);
			]"
		end

	c_clang_is_restrict_qualified_type (t: POINTER): INTEGER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_isRestrictQualifiedType (*(CXType*)$t);
			]"
		end

	c_clang_get_address_space (t: POINTER): INTEGER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_getAddressSpace (*(CXType*)$t);
			]"
		end

	c_clang_get_typedef_name (ct: POINTER): POINTER
		external
			"C inline use <Index.h>"

		alias
			"[
				CXString *result = (CXString*) malloc (sizeof(CXString));
				*result = clang_getTypedefName (*(CXType*)$ct);
				return result;
			]"
		end

	c_clang_get_pointee_type (t: POINTER): POINTER
		external
			"C inline use <Index.h>"

		alias
			"[
				CXType *result = (CXType*) malloc (sizeof(CXType));
				*result = clang_getPointeeType (*(CXType*)$t);
				return result;
			]"
		end

	c_clang_get_type_declaration (t: POINTER): POINTER
		external
			"C inline use <Index.h>"

		alias
			"[
				CXCursor *result = (CXCursor*) malloc (sizeof(CXCursor));
				*result = clang_getTypeDeclaration (*(CXType*)$t);
				return result;
			]"
		end

	c_clang_get_decl_obj_ctype_encoding (c: POINTER): POINTER
		external
			"C inline use <Index.h>"

		alias
			"[
				CXString *result = (CXString*) malloc (sizeof(CXString));
				*result = clang_getDeclObjCTypeEncoding (*(CXCursor*)$c);
				return result;
			]"
		end

	c_clang_type_get_obj_cencoding (type: POINTER): POINTER
		external
			"C inline use <Index.h>"

		alias
			"[
				CXString *result = (CXString*) malloc (sizeof(CXString));
				*result = clang_Type_getObjCEncoding (*(CXType*)$type);
				return result;
			]"
		end

	c_clang_get_type_kind_spelling (k: INTEGER): POINTER
		external
			"C inline use <Index.h>"

		alias
			"[
				CXString *result = (CXString*) malloc (sizeof(CXString));
				*result = clang_getTypeKindSpelling ((enum CXTypeKind)$k);
				return result;
			]"
		end

	c_clang_get_function_type_calling_conv (t: POINTER): INTEGER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_getFunctionTypeCallingConv (*(CXType*)$t);
			]"
		end

	c_clang_get_result_type (t: POINTER): POINTER
		external
			"C inline use <Index.h>"

		alias
			"[
				CXType *result = (CXType*) malloc (sizeof(CXType));
				*result = clang_getResultType (*(CXType*)$t);
				return result;
			]"
		end

	c_clang_get_exception_specification_type (t: POINTER): INTEGER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_getExceptionSpecificationType (*(CXType*)$t);
			]"
		end

	c_clang_get_num_arg_types (t: POINTER): INTEGER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_getNumArgTypes (*(CXType*)$t);
			]"
		end

	c_clang_get_arg_type (t: POINTER; i: INTEGER): POINTER
		external
			"C inline use <Index.h>"

		alias
			"[
				CXType *result = (CXType*) malloc (sizeof(CXType));
				*result = clang_getArgType (*(CXType*)$t, (unsigned)$i);
				return result;
			]"
		end

	c_clang_type_get_obj_cobject_base_type (t: POINTER): POINTER
		external
			"C inline use <Index.h>"

		alias
			"[
				CXType *result = (CXType*) malloc (sizeof(CXType));
				*result = clang_Type_getObjCObjectBaseType (*(CXType*)$t);
				return result;
			]"
		end

	c_clang_type_get_num_obj_cprotocol_refs (t: POINTER): INTEGER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_Type_getNumObjCProtocolRefs (*(CXType*)$t);
			]"
		end

	c_clang_type_get_obj_cprotocol_decl (t: POINTER; i: INTEGER): POINTER
		external
			"C inline use <Index.h>"

		alias
			"[
				CXCursor *result = (CXCursor*) malloc (sizeof(CXCursor));
				*result = clang_Type_getObjCProtocolDecl (*(CXType*)$t, (unsigned)$i);
				return result;
			]"
		end

	c_clang_type_get_num_obj_ctype_args (t: POINTER): INTEGER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_Type_getNumObjCTypeArgs (*(CXType*)$t);
			]"
		end

	c_clang_type_get_obj_ctype_arg (t: POINTER; i: INTEGER): POINTER
		external
			"C inline use <Index.h>"

		alias
			"[
				CXType *result = (CXType*) malloc (sizeof(CXType));
				*result = clang_Type_getObjCTypeArg (*(CXType*)$t, (unsigned)$i);
				return result;
			]"
		end

	c_clang_is_function_type_variadic (t: POINTER): INTEGER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_isFunctionTypeVariadic (*(CXType*)$t);
			]"
		end

	c_clang_get_cursor_result_type (c: POINTER): POINTER
		external
			"C inline use <Index.h>"

		alias
			"[
				CXType *result = (CXType*) malloc (sizeof(CXType));
				*result = clang_getCursorResultType (*(CXCursor*)$c);
				return result;
			]"
		end

	c_clang_get_cursor_exception_specification_type (c: POINTER): INTEGER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_getCursorExceptionSpecificationType (*(CXCursor*)$c);
			]"
		end

	c_clang_is_podtype (t: POINTER): INTEGER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_isPODType (*(CXType*)$t);
			]"
		end

	c_clang_get_element_type (t: POINTER): POINTER
		external
			"C inline use <Index.h>"

		alias
			"[
				CXType *result = (CXType*) malloc (sizeof(CXType));
				*result = clang_getElementType (*(CXType*)$t);
				return result;
			]"
		end

	c_clang_get_num_elements (t: POINTER): INTEGER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_getNumElements (*(CXType*)$t);
			]"
		end

	c_clang_get_array_element_type (t: POINTER): POINTER
		external
			"C inline use <Index.h>"

		alias
			"[
				CXType *result = (CXType*) malloc (sizeof(CXType));
				*result = clang_getArrayElementType (*(CXType*)$t);
				return result;
			]"
		end

	c_clang_get_array_size (t: POINTER): INTEGER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_getArraySize (*(CXType*)$t);
			]"
		end

	c_clang_type_get_named_type (t: POINTER): POINTER
		external
			"C inline use <Index.h>"

		alias
			"[
				CXType *result = (CXType*) malloc (sizeof(CXType));
				*result = clang_Type_getNamedType (*(CXType*)$t);
				return result;
			]"
		end

	c_clang_type_is_transparent_tag_typedef (t: POINTER): INTEGER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_Type_isTransparentTagTypedef (*(CXType*)$t);
			]"
		end

	c_clang_type_get_nullability (t: POINTER): INTEGER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_Type_getNullability (*(CXType*)$t);
			]"
		end

	c_clang_type_get_align_of (t: POINTER): INTEGER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_Type_getAlignOf (*(CXType*)$t);
			]"
		end

	c_clang_type_get_class_type (t: POINTER): POINTER
		external
			"C inline use <Index.h>"

		alias
			"[
				CXType *result = (CXType*) malloc (sizeof(CXType));
				*result = clang_Type_getClassType (*(CXType*)$t);
				return result;
			]"
		end

	c_clang_type_get_size_of (t: POINTER): INTEGER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_Type_getSizeOf (*(CXType*)$t);
			]"
		end

	c_clang_type_get_offset_of (t: POINTER; s: POINTER): INTEGER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_Type_getOffsetOf (*(CXType*)$t, (char const*)$s);
			]"
		end

	c_clang_type_get_modified_type (t: POINTER): POINTER
		external
			"C inline use <Index.h>"

		alias
			"[
				CXType *result = (CXType*) malloc (sizeof(CXType));
				*result = clang_Type_getModifiedType (*(CXType*)$t);
				return result;
			]"
		end

	c_clang_cursor_get_offset_of_field (c: POINTER): INTEGER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_Cursor_getOffsetOfField (*(CXCursor*)$c);
			]"
		end

	c_clang_cursor_is_anonymous (c: POINTER): INTEGER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_Cursor_isAnonymous (*(CXCursor*)$c);
			]"
		end

	c_clang_type_get_num_template_arguments (t: POINTER): INTEGER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_Type_getNumTemplateArguments (*(CXType*)$t);
			]"
		end

	c_clang_type_get_template_argument_as_type (t: POINTER; i: INTEGER): POINTER
		external
			"C inline use <Index.h>"

		alias
			"[
				CXType *result = (CXType*) malloc (sizeof(CXType));
				*result = clang_Type_getTemplateArgumentAsType (*(CXType*)$t, (unsigned)$i);
				return result;
			]"
		end

	c_clang_type_get_cxxref_qualifier (t: POINTER): INTEGER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_Type_getCXXRefQualifier (*(CXType*)$t);
			]"
		end

	c_clang_cursor_is_bit_field (c: POINTER): INTEGER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_Cursor_isBitField (*(CXCursor*)$c);
			]"
		end

	c_clang_is_virtual_base (anonymous_1: POINTER): INTEGER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_isVirtualBase (*(CXCursor*)$anonymous_1);
			]"
		end

	c_clang_get_cxxaccess_specifier (anonymous_1: POINTER): INTEGER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_getCXXAccessSpecifier (*(CXCursor*)$anonymous_1);
			]"
		end

	c_clang_cursor_get_storage_class (anonymous_1: POINTER): INTEGER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_Cursor_getStorageClass (*(CXCursor*)$anonymous_1);
			]"
		end

	c_clang_get_num_overloaded_decls (cursor: POINTER): INTEGER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_getNumOverloadedDecls (*(CXCursor*)$cursor);
			]"
		end

	c_clang_get_overloaded_decl (cursor: POINTER; index: INTEGER): POINTER
		external
			"C inline use <Index.h>"

		alias
			"[
				CXCursor *result = (CXCursor*) malloc (sizeof(CXCursor));
				*result = clang_getOverloadedDecl (*(CXCursor*)$cursor, (unsigned)$index);
				return result;
			]"
		end

	c_clang_get_iboutlet_collection_type (anonymous_1: POINTER): POINTER
		external
			"C inline use <Index.h>"

		alias
			"[
				CXType *result = (CXType*) malloc (sizeof(CXType));
				*result = clang_getIBOutletCollectionType (*(CXCursor*)$anonymous_1);
				return result;
			]"
		end

	c_clang_visit_children (parent: POINTER; visitor: POINTER; client_data: POINTER): INTEGER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_visitChildren (*(CXCursor*)$parent, (CXCursorVisitor)$visitor, (CXClientData)$client_data);
			]"
		end

	c_clang_get_cursor_usr (anonymous_1: POINTER): POINTER
		external
			"C inline use <Index.h>"

		alias
			"[
				CXString *result = (CXString*) malloc (sizeof(CXString));
				*result = clang_getCursorUSR (*(CXCursor*)$anonymous_1);
				return result;
			]"
		end

	c_clang_construct_usr_obj_civar (name: POINTER; classusr: POINTER): POINTER
		external
			"C inline use <Index.h>"

		alias
			"[
				CXString *result = (CXString*) malloc (sizeof(CXString));
				*result = clang_constructUSR_ObjCIvar ((char const*)$name, *(CXString*)$classusr);
				return result;
			]"
		end

	c_clang_construct_usr_obj_cmethod (name: POINTER; isinstancemethod: INTEGER; classusr: POINTER): POINTER
		external
			"C inline use <Index.h>"

		alias
			"[
				CXString *result = (CXString*) malloc (sizeof(CXString));
				*result = clang_constructUSR_ObjCMethod ((char const*)$name, (unsigned)$isinstancemethod, *(CXString*)$classusr);
				return result;
			]"
		end

	c_clang_construct_usr_obj_cproperty (property: POINTER; classusr: POINTER): POINTER
		external
			"C inline use <Index.h>"

		alias
			"[
				CXString *result = (CXString*) malloc (sizeof(CXString));
				*result = clang_constructUSR_ObjCProperty ((char const*)$property, *(CXString*)$classusr);
				return result;
			]"
		end

	c_clang_get_cursor_spelling (anonymous_1: POINTER): POINTER
		external
			"C inline use <Index.h>"

		alias
			"[
				CXString *result = (CXString*) malloc (sizeof(CXString));
				*result = clang_getCursorSpelling (*(CXCursor*)$anonymous_1);
				return result;
			]"
		end

	c_clang_cursor_get_spelling_name_range (anonymous_1: POINTER; pieceindex: INTEGER; options: INTEGER): POINTER
		external
			"C inline use <Index.h>"

		alias
			"[
				CXSourceRange *result = (CXSourceRange*) malloc (sizeof(CXSourceRange));
				*result = clang_Cursor_getSpellingNameRange (*(CXCursor*)$anonymous_1, (unsigned)$pieceindex, (unsigned)$options);
				return result;
			]"
		end

	c_clang_printing_policy_get_property (policy: POINTER; property: INTEGER): INTEGER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_PrintingPolicy_getProperty ((CXPrintingPolicy)$policy, (enum CXPrintingPolicyProperty)$property);
			]"
		end

	c_clang_printing_policy_set_property (policy: POINTER; property: INTEGER; value: INTEGER)
		external
			"C inline use <Index.h>"
		alias
			"[
				clang_PrintingPolicy_setProperty ((CXPrintingPolicy)$policy, (enum CXPrintingPolicyProperty)$property, (unsigned)$value);
			]"
		end

	c_clang_get_cursor_printing_policy (anonymous_1: POINTER): POINTER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_getCursorPrintingPolicy (*(CXCursor*)$anonymous_1);
			]"
		end

	c_clang_printing_policy_dispose (policy: POINTER)
		external
			"C inline use <Index.h>"
		alias
			"[
				clang_PrintingPolicy_dispose ((CXPrintingPolicy)$policy);
			]"
		end

	c_clang_get_cursor_pretty_printed (cursor: POINTER; policy: POINTER): POINTER
		external
			"C inline use <Index.h>"

		alias
			"[
				CXString *result = (CXString*) malloc (sizeof(CXString));
				*result = clang_getCursorPrettyPrinted (*(CXCursor*)$cursor, (CXPrintingPolicy)$policy);
				return result;
			]"
		end

	c_clang_get_cursor_display_name (anonymous_1: POINTER): POINTER
		external
			"C inline use <Index.h>"

		alias
			"[
				CXString *result = (CXString*) malloc (sizeof(CXString));
				*result = clang_getCursorDisplayName (*(CXCursor*)$anonymous_1);
				return result;
			]"
		end

	c_clang_get_cursor_referenced (anonymous_1: POINTER): POINTER
		external
			"C inline use <Index.h>"

		alias
			"[
				CXCursor *result = (CXCursor*) malloc (sizeof(CXCursor));
				*result = clang_getCursorReferenced (*(CXCursor*)$anonymous_1);
				return result;
			]"
		end

	c_clang_get_cursor_definition (anonymous_1: POINTER): POINTER
		external
			"C inline use <Index.h>"

		alias
			"[
				CXCursor *result = (CXCursor*) malloc (sizeof(CXCursor));
				*result = clang_getCursorDefinition (*(CXCursor*)$anonymous_1);
				return result;
			]"
		end

	c_clang_is_cursor_definition (anonymous_1: POINTER): INTEGER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_isCursorDefinition (*(CXCursor*)$anonymous_1);
			]"
		end

	c_clang_get_canonical_cursor (anonymous_1: POINTER): POINTER
		external
			"C inline use <Index.h>"

		alias
			"[
				CXCursor *result = (CXCursor*) malloc (sizeof(CXCursor));
				*result = clang_getCanonicalCursor (*(CXCursor*)$anonymous_1);
				return result;
			]"
		end

	c_clang_cursor_get_obj_cselector_index (anonymous_1: POINTER): INTEGER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_Cursor_getObjCSelectorIndex (*(CXCursor*)$anonymous_1);
			]"
		end

	c_clang_cursor_is_dynamic_call (c: POINTER): INTEGER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_Cursor_isDynamicCall (*(CXCursor*)$c);
			]"
		end

	c_clang_cursor_get_receiver_type (c: POINTER): POINTER
		external
			"C inline use <Index.h>"

		alias
			"[
				CXType *result = (CXType*) malloc (sizeof(CXType));
				*result = clang_Cursor_getReceiverType (*(CXCursor*)$c);
				return result;
			]"
		end

	c_clang_cursor_get_obj_cproperty_attributes (c: POINTER; reserved: INTEGER): INTEGER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_Cursor_getObjCPropertyAttributes (*(CXCursor*)$c, (unsigned)$reserved);
			]"
		end

	c_clang_cursor_get_obj_cproperty_getter_name (c: POINTER): POINTER
		external
			"C inline use <Index.h>"

		alias
			"[
				CXString *result = (CXString*) malloc (sizeof(CXString));
				*result = clang_Cursor_getObjCPropertyGetterName (*(CXCursor*)$c);
				return result;
			]"
		end

	c_clang_cursor_get_obj_cproperty_setter_name (c: POINTER): POINTER
		external
			"C inline use <Index.h>"

		alias
			"[
				CXString *result = (CXString*) malloc (sizeof(CXString));
				*result = clang_Cursor_getObjCPropertySetterName (*(CXCursor*)$c);
				return result;
			]"
		end

	c_clang_cursor_get_obj_cdecl_qualifiers (c: POINTER): INTEGER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_Cursor_getObjCDeclQualifiers (*(CXCursor*)$c);
			]"
		end

	c_clang_cursor_is_obj_coptional (c: POINTER): INTEGER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_Cursor_isObjCOptional (*(CXCursor*)$c);
			]"
		end

	c_clang_cursor_is_variadic (c: POINTER): INTEGER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_Cursor_isVariadic (*(CXCursor*)$c);
			]"
		end

	c_clang_cursor_is_external_symbol (c: POINTER; language: POINTER; definedin: POINTER; isgenerated: POINTER): INTEGER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_Cursor_isExternalSymbol (*(CXCursor*)$c, (CXString*)$language, (CXString*)$definedin, (unsigned*)$isgenerated);
			]"
		end

	c_clang_cursor_get_comment_range (c: POINTER): POINTER
		external
			"C inline use <Index.h>"

		alias
			"[
				CXSourceRange *result = (CXSourceRange*) malloc (sizeof(CXSourceRange));
				*result = clang_Cursor_getCommentRange (*(CXCursor*)$c);
				return result;
			]"
		end

	c_clang_cursor_get_raw_comment_text (c: POINTER): POINTER
		external
			"C inline use <Index.h>"

		alias
			"[
				CXString *result = (CXString*) malloc (sizeof(CXString));
				*result = clang_Cursor_getRawCommentText (*(CXCursor*)$c);
				return result;
			]"
		end

	c_clang_cursor_get_brief_comment_text (c: POINTER): POINTER
		external
			"C inline use <Index.h>"

		alias
			"[
				CXString *result = (CXString*) malloc (sizeof(CXString));
				*result = clang_Cursor_getBriefCommentText (*(CXCursor*)$c);
				return result;
			]"
		end

	c_clang_cursor_get_mangling (anonymous_1: POINTER): POINTER
		external
			"C inline use <Index.h>"

		alias
			"[
				CXString *result = (CXString*) malloc (sizeof(CXString));
				*result = clang_Cursor_getMangling (*(CXCursor*)$anonymous_1);
				return result;
			]"
		end

	c_clang_cursor_get_cxxmanglings (anonymous_1: POINTER): POINTER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_Cursor_getCXXManglings (*(CXCursor*)$anonymous_1);
			]"
		end

	c_clang_cursor_get_obj_cmanglings (anonymous_1: POINTER): POINTER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_Cursor_getObjCManglings (*(CXCursor*)$anonymous_1);
			]"
		end

	c_clang_cursor_get_module (c: POINTER): POINTER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_Cursor_getModule (*(CXCursor*)$c);
			]"
		end

	c_clang_get_module_for_file (anonymous_1: POINTER; anonymous_2: POINTER): POINTER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_getModuleForFile ((CXTranslationUnit)$anonymous_1, (CXFile)$anonymous_2);
			]"
		end

	c_clang_module_get_astfile (module: POINTER): POINTER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_Module_getASTFile ((CXModule)$module);
			]"
		end

	c_clang_module_get_parent (module: POINTER): POINTER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_Module_getParent ((CXModule)$module);
			]"
		end

	c_clang_module_get_name (module: POINTER): POINTER
		external
			"C inline use <Index.h>"

		alias
			"[
				CXString *result = (CXString*) malloc (sizeof(CXString));
				*result = clang_Module_getName ((CXModule)$module);
				return result;
			]"
		end

	c_clang_module_get_full_name (module: POINTER): POINTER
		external
			"C inline use <Index.h>"

		alias
			"[
				CXString *result = (CXString*) malloc (sizeof(CXString));
				*result = clang_Module_getFullName ((CXModule)$module);
				return result;
			]"
		end

	c_clang_module_is_system (module: POINTER): INTEGER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_Module_isSystem ((CXModule)$module);
			]"
		end

	c_clang_module_get_num_top_level_headers (anonymous_1: POINTER; module: POINTER): INTEGER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_Module_getNumTopLevelHeaders ((CXTranslationUnit)$anonymous_1, (CXModule)$module);
			]"
		end

	c_clang_module_get_top_level_header (anonymous_1: POINTER; module: POINTER; index: INTEGER): POINTER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_Module_getTopLevelHeader ((CXTranslationUnit)$anonymous_1, (CXModule)$module, (unsigned)$index);
			]"
		end

	c_clang_cxxconstructor_is_converting_constructor (c: POINTER): INTEGER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_CXXConstructor_isConvertingConstructor (*(CXCursor*)$c);
			]"
		end

	c_clang_cxxconstructor_is_copy_constructor (c: POINTER): INTEGER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_CXXConstructor_isCopyConstructor (*(CXCursor*)$c);
			]"
		end

	c_clang_cxxconstructor_is_default_constructor (c: POINTER): INTEGER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_CXXConstructor_isDefaultConstructor (*(CXCursor*)$c);
			]"
		end

	c_clang_cxxconstructor_is_move_constructor (c: POINTER): INTEGER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_CXXConstructor_isMoveConstructor (*(CXCursor*)$c);
			]"
		end

	c_clang_cxxfield_is_mutable (c: POINTER): INTEGER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_CXXField_isMutable (*(CXCursor*)$c);
			]"
		end

	c_clang_cxxmethod_is_defaulted (c: POINTER): INTEGER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_CXXMethod_isDefaulted (*(CXCursor*)$c);
			]"
		end

	c_clang_cxxmethod_is_pure_virtual (c: POINTER): INTEGER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_CXXMethod_isPureVirtual (*(CXCursor*)$c);
			]"
		end

	c_clang_cxxmethod_is_static (c: POINTER): INTEGER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_CXXMethod_isStatic (*(CXCursor*)$c);
			]"
		end

	c_clang_cxxmethod_is_virtual (c: POINTER): INTEGER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_CXXMethod_isVirtual (*(CXCursor*)$c);
			]"
		end

	c_clang_cxxrecord_is_abstract (c: POINTER): INTEGER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_CXXRecord_isAbstract (*(CXCursor*)$c);
			]"
		end

	c_clang_enum_decl_is_scoped (c: POINTER): INTEGER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_EnumDecl_isScoped (*(CXCursor*)$c);
			]"
		end

	c_clang_cxxmethod_is_const (c: POINTER): INTEGER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_CXXMethod_isConst (*(CXCursor*)$c);
			]"
		end

	c_clang_get_template_cursor_kind (c: POINTER): INTEGER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_getTemplateCursorKind (*(CXCursor*)$c);
			]"
		end

	c_clang_get_specialized_cursor_template (c: POINTER): POINTER
		external
			"C inline use <Index.h>"

		alias
			"[
				CXCursor *result = (CXCursor*) malloc (sizeof(CXCursor));
				*result = clang_getSpecializedCursorTemplate (*(CXCursor*)$c);
				return result;
			]"
		end

	c_clang_get_cursor_reference_name_range (c: POINTER; nameflags: INTEGER; pieceindex: INTEGER): POINTER
		external
			"C inline use <Index.h>"

		alias
			"[
				CXSourceRange *result = (CXSourceRange*) malloc (sizeof(CXSourceRange));
				*result = clang_getCursorReferenceNameRange (*(CXCursor*)$c, (unsigned)$nameflags, (unsigned)$pieceindex);
				return result;
			]"
		end

	c_clang_get_token (tu: POINTER; location: POINTER): POINTER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_getToken ((CXTranslationUnit)$tu, *(CXSourceLocation*)$location);
			]"
		end

	c_clang_get_token_kind (anonymous_1: POINTER): INTEGER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_getTokenKind (*(CXToken*)$anonymous_1);
			]"
		end

	c_clang_get_token_spelling (anonymous_1: POINTER; anonymous_2: POINTER): POINTER
		external
			"C inline use <Index.h>"

		alias
			"[
				CXString *result = (CXString*) malloc (sizeof(CXString));
				*result = clang_getTokenSpelling ((CXTranslationUnit)$anonymous_1, *(CXToken*)$anonymous_2);
				return result;
			]"
		end

	c_clang_get_token_location (anonymous_1: POINTER; anonymous_2: POINTER): POINTER
		external
			"C inline use <Index.h>"

		alias
			"[
				CXSourceLocation *result = (CXSourceLocation*) malloc (sizeof(CXSourceLocation));
				*result = clang_getTokenLocation ((CXTranslationUnit)$anonymous_1, *(CXToken*)$anonymous_2);
				return result;
			]"
		end

	c_clang_get_token_extent (anonymous_1: POINTER; anonymous_2: POINTER): POINTER
		external
			"C inline use <Index.h>"

		alias
			"[
				CXSourceRange *result = (CXSourceRange*) malloc (sizeof(CXSourceRange));
				*result = clang_getTokenExtent ((CXTranslationUnit)$anonymous_1, *(CXToken*)$anonymous_2);
				return result;
			]"
		end

	c_clang_tokenize (tu: POINTER; range: POINTER; tokens: POINTER; numtokens: POINTER)
		external
			"C inline use <Index.h>"
		alias
			"[
				clang_tokenize ((CXTranslationUnit)$tu, *(CXSourceRange*)$range, (CXToken**)$tokens, (unsigned*)$numtokens);
			]"
		end

	c_clang_annotate_tokens (tu: POINTER; tokens: POINTER; numtokens: INTEGER; cursors: POINTER)
		external
			"C inline use <Index.h>"
		alias
			"[
				clang_annotateTokens ((CXTranslationUnit)$tu, (CXToken*)$tokens, (unsigned)$numtokens, (CXCursor*)$cursors);
			]"
		end

	c_clang_dispose_tokens (tu: POINTER; tokens: POINTER; numtokens: INTEGER)
		external
			"C inline use <Index.h>"
		alias
			"[
				clang_disposeTokens ((CXTranslationUnit)$tu, (CXToken*)$tokens, (unsigned)$numtokens);
			]"
		end

	c_clang_get_cursor_kind_spelling (kind: INTEGER): POINTER
		external
			"C inline use <Index.h>"

		alias
			"[
				CXString *result = (CXString*) malloc (sizeof(CXString));
				*result = clang_getCursorKindSpelling ((enum CXCursorKind)$kind);
				return result;
			]"
		end

	c_clang_get_definition_spelling_and_extent (anonymous_1: POINTER; startbuf: POINTER; endbuf: POINTER; startline: POINTER; startcolumn: POINTER; endline: POINTER; endcolumn: POINTER)
		external
			"C inline use <Index.h>"
		alias
			"[
				clang_getDefinitionSpellingAndExtent (*(CXCursor*)$anonymous_1, (char const**)$startbuf, (char const**)$endbuf, (unsigned*)$startline, (unsigned*)$startcolumn, (unsigned*)$endline, (unsigned*)$endcolumn);
			]"
		end

	c_clang_execute_on_thread (fn: POINTER; user_data: POINTER; stack_size: INTEGER)
		external
			"C inline use <Index.h>"
		alias
			"[
				clang_executeOnThread ((void (*) (void *anonymous_1))$fn, (void*)$user_data, (unsigned)$stack_size);
			]"
		end

	c_clang_get_completion_chunk_kind (completion_string: POINTER; chunk_number: INTEGER): INTEGER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_getCompletionChunkKind ((CXCompletionString)$completion_string, (unsigned)$chunk_number);
			]"
		end

	c_clang_get_completion_chunk_text (completion_string: POINTER; chunk_number: INTEGER): POINTER
		external
			"C inline use <Index.h>"

		alias
			"[
				CXString *result = (CXString*) malloc (sizeof(CXString));
				*result = clang_getCompletionChunkText ((CXCompletionString)$completion_string, (unsigned)$chunk_number);
				return result;
			]"
		end

	c_clang_get_completion_chunk_completion_string (completion_string: POINTER; chunk_number: INTEGER): POINTER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_getCompletionChunkCompletionString ((CXCompletionString)$completion_string, (unsigned)$chunk_number);
			]"
		end

	c_clang_get_num_completion_chunks (completion_string: POINTER): INTEGER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_getNumCompletionChunks ((CXCompletionString)$completion_string);
			]"
		end

	c_clang_get_completion_priority (completion_string: POINTER): INTEGER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_getCompletionPriority ((CXCompletionString)$completion_string);
			]"
		end

	c_clang_get_completion_availability (completion_string: POINTER): INTEGER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_getCompletionAvailability ((CXCompletionString)$completion_string);
			]"
		end

	c_clang_get_completion_num_annotations (completion_string: POINTER): INTEGER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_getCompletionNumAnnotations ((CXCompletionString)$completion_string);
			]"
		end

	c_clang_get_completion_annotation (completion_string: POINTER; annotation_number: INTEGER): POINTER
		external
			"C inline use <Index.h>"

		alias
			"[
				CXString *result = (CXString*) malloc (sizeof(CXString));
				*result = clang_getCompletionAnnotation ((CXCompletionString)$completion_string, (unsigned)$annotation_number);
				return result;
			]"
		end

	c_clang_get_completion_parent (completion_string: POINTER; kind: POINTER): POINTER
		external
			"C inline use <Index.h>"

		alias
			"[
				CXString *result = (CXString*) malloc (sizeof(CXString));
				*result = clang_getCompletionParent ((CXCompletionString)$completion_string, (enum CXCursorKind*)$kind);
				return result;
			]"
		end

	c_clang_get_completion_brief_comment (completion_string: POINTER): POINTER
		external
			"C inline use <Index.h>"

		alias
			"[
				CXString *result = (CXString*) malloc (sizeof(CXString));
				*result = clang_getCompletionBriefComment ((CXCompletionString)$completion_string);
				return result;
			]"
		end

	c_clang_get_cursor_completion_string (cursor: POINTER): POINTER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_getCursorCompletionString (*(CXCursor*)$cursor);
			]"
		end

	c_clang_get_completion_num_fix_its (results: POINTER; completion_index: INTEGER): INTEGER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_getCompletionNumFixIts ((CXCodeCompleteResults*)$results, (unsigned)$completion_index);
			]"
		end

	c_clang_get_completion_fix_it (results: POINTER; completion_index: INTEGER; fixit_index: INTEGER; replacement_range: POINTER): POINTER
		external
			"C inline use <Index.h>"

		alias
			"[
				CXString *result = (CXString*) malloc (sizeof(CXString));
				*result = clang_getCompletionFixIt ((CXCodeCompleteResults*)$results, (unsigned)$completion_index, (unsigned)$fixit_index, (CXSourceRange*)$replacement_range);
				return result;
			]"
		end

	c_clang_code_complete_at (tu: POINTER; complete_filename: POINTER; complete_line: INTEGER; complete_column: INTEGER; unsaved_files: POINTER; num_unsaved_files: INTEGER; options: INTEGER): POINTER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_codeCompleteAt ((CXTranslationUnit)$tu, (char const*)$complete_filename, (unsigned)$complete_line, (unsigned)$complete_column, (struct CXUnsavedFile*)$unsaved_files, (unsigned)$num_unsaved_files, (unsigned)$options);
			]"
		end

	c_clang_sort_code_completion_results (results: POINTER; numresults: INTEGER)
		external
			"C inline use <Index.h>"
		alias
			"[
				clang_sortCodeCompletionResults ((CXCompletionResult*)$results, (unsigned)$numresults);
			]"
		end

	c_clang_dispose_code_complete_results (results: POINTER)
		external
			"C inline use <Index.h>"
		alias
			"[
				clang_disposeCodeCompleteResults ((CXCodeCompleteResults*)$results);
			]"
		end

	c_clang_code_complete_get_num_diagnostics (results: POINTER): INTEGER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_codeCompleteGetNumDiagnostics ((CXCodeCompleteResults*)$results);
			]"
		end

	c_clang_code_complete_get_diagnostic (results: POINTER; index: INTEGER): POINTER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_codeCompleteGetDiagnostic ((CXCodeCompleteResults*)$results, (unsigned)$index);
			]"
		end

	c_clang_code_complete_get_contexts (results: POINTER): INTEGER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_codeCompleteGetContexts ((CXCodeCompleteResults*)$results);
			]"
		end

	c_clang_code_complete_get_container_kind (results: POINTER; isincomplete: POINTER): INTEGER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_codeCompleteGetContainerKind ((CXCodeCompleteResults*)$results, (unsigned*)$isincomplete);
			]"
		end

	c_clang_code_complete_get_container_usr (results: POINTER): POINTER
		external
			"C inline use <Index.h>"

		alias
			"[
				CXString *result = (CXString*) malloc (sizeof(CXString));
				*result = clang_codeCompleteGetContainerUSR ((CXCodeCompleteResults*)$results);
				return result;
			]"
		end

	c_clang_code_complete_get_obj_cselector (results: POINTER): POINTER
		external
			"C inline use <Index.h>"

		alias
			"[
				CXString *result = (CXString*) malloc (sizeof(CXString));
				*result = clang_codeCompleteGetObjCSelector ((CXCodeCompleteResults*)$results);
				return result;
			]"
		end

	c_clang_get_clang_version: POINTER
		external
			"C inline use <Index.h>"

		alias
			"[
				CXString *result = (CXString*) malloc (sizeof(CXString));
				*result = clang_getClangVersion ();
				return result;
			]"
		end

	c_clang_get_inclusions (tu: POINTER; visitor: POINTER; client_data: POINTER)
		external
			"C inline use <Index.h>"
		alias
			"[
				clang_getInclusions ((CXTranslationUnit)$tu, (CXInclusionVisitor)$visitor, (CXClientData)$client_data);
			]"
		end

	c_clang_cursor_evaluate (c: POINTER): POINTER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_Cursor_Evaluate (*(CXCursor*)$c);
			]"
		end

	c_clang_eval_result_get_kind (e: POINTER): INTEGER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_EvalResult_getKind ((CXEvalResult)$e);
			]"
		end

	c_clang_eval_result_get_as_int (e: POINTER): INTEGER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_EvalResult_getAsInt ((CXEvalResult)$e);
			]"
		end

	c_clang_eval_result_get_as_long_long (e: POINTER): INTEGER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_EvalResult_getAsLongLong ((CXEvalResult)$e);
			]"
		end

	c_clang_eval_result_is_unsigned_int (e: POINTER): INTEGER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_EvalResult_isUnsignedInt ((CXEvalResult)$e);
			]"
		end

	c_clang_eval_result_get_as_unsigned (e: POINTER): INTEGER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_EvalResult_getAsUnsigned ((CXEvalResult)$e);
			]"
		end

	c_clang_eval_result_get_as_double (e: POINTER): REAL_64
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_EvalResult_getAsDouble ((CXEvalResult)$e);
			]"
		end

	c_clang_eval_result_get_as_str (e: POINTER): POINTER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_EvalResult_getAsStr ((CXEvalResult)$e);
			]"
		end

	c_clang_eval_result_dispose (e: POINTER)
		external
			"C inline use <Index.h>"
		alias
			"[
				clang_EvalResult_dispose ((CXEvalResult)$e);
			]"
		end

	c_clang_get_remappings_from_file_list (filepaths: POINTER; numfiles: INTEGER): POINTER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_getRemappingsFromFileList ((char const**)$filepaths, (unsigned)$numfiles);
			]"
		end

	c_clang_remap_get_num_files (anonymous_1: POINTER): INTEGER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_remap_getNumFiles ((CXRemapping)$anonymous_1);
			]"
		end

	c_clang_remap_get_filenames (anonymous_1: POINTER; index: INTEGER; original: POINTER; transformed: POINTER)
		external
			"C inline use <Index.h>"
		alias
			"[
				clang_remap_getFilenames ((CXRemapping)$anonymous_1, (unsigned)$index, (CXString*)$original, (CXString*)$transformed);
			]"
		end

	c_clang_remap_dispose (anonymous_1: POINTER)
		external
			"C inline use <Index.h>"
		alias
			"[
				clang_remap_dispose ((CXRemapping)$anonymous_1);
			]"
		end

	c_clang_find_references_in_file (cursor: POINTER; file: POINTER; visitor: POINTER): INTEGER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_findReferencesInFile (*(CXCursor*)$cursor, (CXFile)$file, *(CXCursorAndRangeVisitor*)$visitor);
			]"
		end

	c_clang_find_includes_in_file (tu: POINTER; file: POINTER; visitor: POINTER): INTEGER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_findIncludesInFile ((CXTranslationUnit)$tu, (CXFile)$file, *(CXCursorAndRangeVisitor*)$visitor);
			]"
		end

	c_clang_index_is_entity_obj_ccontainer_kind (anonymous_1: INTEGER): INTEGER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_index_isEntityObjCContainerKind ((CXIdxEntityKind)$anonymous_1);
			]"
		end

	c_clang_index_get_obj_ccontainer_decl_info (anonymous_1: POINTER): POINTER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_index_getObjCContainerDeclInfo ((CXIdxDeclInfo const*)$anonymous_1);
			]"
		end

	c_clang_index_get_obj_cinterface_decl_info (anonymous_1: POINTER): POINTER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_index_getObjCInterfaceDeclInfo ((CXIdxDeclInfo const*)$anonymous_1);
			]"
		end

	c_clang_index_get_obj_ccategory_decl_info (anonymous_1: POINTER): POINTER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_index_getObjCCategoryDeclInfo ((CXIdxDeclInfo const*)$anonymous_1);
			]"
		end

	c_clang_index_get_obj_cprotocol_ref_list_info (anonymous_1: POINTER): POINTER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_index_getObjCProtocolRefListInfo ((CXIdxDeclInfo const*)$anonymous_1);
			]"
		end

	c_clang_index_get_obj_cproperty_decl_info (anonymous_1: POINTER): POINTER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_index_getObjCPropertyDeclInfo ((CXIdxDeclInfo const*)$anonymous_1);
			]"
		end

	c_clang_index_get_iboutlet_collection_attr_info (anonymous_1: POINTER): POINTER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_index_getIBOutletCollectionAttrInfo ((CXIdxAttrInfo const*)$anonymous_1);
			]"
		end

	c_clang_index_get_cxxclass_decl_info (anonymous_1: POINTER): POINTER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_index_getCXXClassDeclInfo ((CXIdxDeclInfo const*)$anonymous_1);
			]"
		end

	c_clang_index_get_client_container (anonymous_1: POINTER): POINTER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_index_getClientContainer ((CXIdxContainerInfo const*)$anonymous_1);
			]"
		end

	c_clang_index_set_client_container (anonymous_1: POINTER; anonymous_2: POINTER)
		external
			"C inline use <Index.h>"
		alias
			"[
				clang_index_setClientContainer ((CXIdxContainerInfo const*)$anonymous_1, (CXIdxClientContainer)$anonymous_2);
			]"
		end

	c_clang_index_get_client_entity (anonymous_1: POINTER): POINTER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_index_getClientEntity ((CXIdxEntityInfo const*)$anonymous_1);
			]"
		end

	c_clang_index_set_client_entity (anonymous_1: POINTER; anonymous_2: POINTER)
		external
			"C inline use <Index.h>"
		alias
			"[
				clang_index_setClientEntity ((CXIdxEntityInfo const*)$anonymous_1, (CXIdxClientEntity)$anonymous_2);
			]"
		end

	c_clang_index_action_create (cidx: POINTER): POINTER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_IndexAction_create ((CXIndex)$cidx);
			]"
		end

	c_clang_index_action_dispose (anonymous_1: POINTER)
		external
			"C inline use <Index.h>"
		alias
			"[
				clang_IndexAction_dispose ((CXIndexAction)$anonymous_1);
			]"
		end

	c_clang_index_source_file (anonymous_1: POINTER; client_data: POINTER; index_callbacks: POINTER; index_callbacks_size: INTEGER; index_options: INTEGER; source_filename: POINTER; command_line_args: POINTER; num_command_line_args: INTEGER; unsaved_files: POINTER; num_unsaved_files: INTEGER; out_tu: POINTER; tu_options: INTEGER): INTEGER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_indexSourceFile ((CXIndexAction)$anonymous_1, (CXClientData)$client_data, (IndexerCallbacks*)$index_callbacks, (unsigned)$index_callbacks_size, (unsigned)$index_options, (char const*)$source_filename, (char const*const *)$command_line_args, (int)$num_command_line_args, (struct CXUnsavedFile*)$unsaved_files, (unsigned)$num_unsaved_files, (CXTranslationUnit*)$out_tu, (unsigned)$tu_options);
			]"
		end

	c_clang_index_source_file_full_argv (anonymous_1: POINTER; client_data: POINTER; index_callbacks: POINTER; index_callbacks_size: INTEGER; index_options: INTEGER; source_filename: POINTER; command_line_args: POINTER; num_command_line_args: INTEGER; unsaved_files: POINTER; num_unsaved_files: INTEGER; out_tu: POINTER; tu_options: INTEGER): INTEGER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_indexSourceFileFullArgv ((CXIndexAction)$anonymous_1, (CXClientData)$client_data, (IndexerCallbacks*)$index_callbacks, (unsigned)$index_callbacks_size, (unsigned)$index_options, (char const*)$source_filename, (char const*const *)$command_line_args, (int)$num_command_line_args, (struct CXUnsavedFile*)$unsaved_files, (unsigned)$num_unsaved_files, (CXTranslationUnit*)$out_tu, (unsigned)$tu_options);
			]"
		end

	c_clang_index_translation_unit (anonymous_1: POINTER; client_data: POINTER; index_callbacks: POINTER; index_callbacks_size: INTEGER; index_options: INTEGER; anonymous_2: POINTER): INTEGER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_indexTranslationUnit ((CXIndexAction)$anonymous_1, (CXClientData)$client_data, (IndexerCallbacks*)$index_callbacks, (unsigned)$index_callbacks_size, (unsigned)$index_options, (CXTranslationUnit)$anonymous_2);
			]"
		end

	c_clang_index_loc_get_file_location (loc: POINTER; indexfile: POINTER; file: POINTER; line: POINTER; column: POINTER; offset: POINTER)
		external
			"C inline use <Index.h>"
		alias
			"[
				clang_indexLoc_getFileLocation (*(CXIdxLoc*)$loc, (CXIdxClientFile*)$indexfile, (CXFile*)$file, (unsigned*)$line, (unsigned*)$column, (unsigned*)$offset);
			]"
		end

	c_clang_index_loc_get_cxsource_location (loc: POINTER): POINTER
		external
			"C inline use <Index.h>"

		alias
			"[
				CXSourceLocation *result = (CXSourceLocation*) malloc (sizeof(CXSourceLocation));
				*result = clang_indexLoc_getCXSourceLocation (*(CXIdxLoc*)$loc);
				return result;
			]"
		end

	c_clang_type_visit_fields (t: POINTER; visitor: POINTER; client_data: POINTER): INTEGER
		external
			"C inline use <Index.h>"
		alias
			"[
				return clang_Type_visitFields (*(CXType*)$t, (CXFieldVisitor)$visitor, (CXClientData)$client_data);
			]"
		end

feature -- Externals Address

end
